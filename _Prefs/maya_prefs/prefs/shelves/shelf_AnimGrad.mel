global proc shelf_AnimGrad () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "animBot Toggle - This will toggle animBot toolbar ON and OFF." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "animBot - animBot Toggle" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/leandro_laa/Documents/maya/scripts/animBot/_resources/img/icons_shelf/white/create_toggle_button_on_shelf_shelf.png" 
        -image1 "C:/Users/leandro_laa/Documents/maya/scripts/animBot/_resources/img/icons_shelf/white/create_toggle_button_on_shelf_shelf.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.animBotMenu_toggle();" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "ATools" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "from aTools.animTools.animBar import animBarUI; animBarUI.show('..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "aTools" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from aTools.animTools.animBar import animBarUI; animBarUI.show('toggle')" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Animagrad Menu" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import amg_menu\nreload(amg_menu)\n\namg_menu.make_menu()" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "AMG" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import amg_menu\nreload(amg_menu)\n\namg_menu.make_menu()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Reset All Offscreen Window" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "string $openWindows[] = `lsUI -windows`;\nfor ($i=0; $i < size ($..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "rWND" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "string $openWindows[] = `lsUI -windows`;\nfor ($i=0; $i < size ($openWindows);$i++) \n{ \nif ($openWindows[$i] != \"MayaWindow\" && $openWindows[$i] != \"scriptEditorPanel1Window\") \n{ \ndeleteUI $openWindows[$i]; \nwindowPref -remove $openWindows[$i]; \n}\n}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit Picker" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import anim_picker\nanim_picker.load(edit=True)" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ePCK" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import anim_picker\nanim_picker.load(edit=True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Load Picker" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import anim_picker\nanim_picker.load()" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "lPCK" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import anim_picker\nanim_picker.load()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Save the current preferences" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Save Preferences" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SP" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconFile.png" 
        -image1 "menuIconFile.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "SavePreferences" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select object(s) to generate a motion trail over time" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Create Editable Motion Trail" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "motionTrail.png" 
        -image1 "motionTrail.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "doMotionTrail 3 { \"snapshot  -motionTrail 1  -increment 1 -startTime `playbackOptions -query -min` -endTime `playbackOptions -query -max`\", \"1\",\"0\",\"0\",\"1\",\"1\",\"1\",\"0\",\"1\"}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\ncmds.loadPlugin(tweener.py, q=True)\ncmds.tweener()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\ncmds.loadPlugin(tweener.py, q=True)\ncmd..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import maya.cmds as cmds\ncmds.loadPlugin(tweener.py, q=True)\ncmds.tweener()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 39
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "AdvancedSkeleton5" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "AdvancedSkeleton5" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/AS5.png" 
        -image1 "C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/AS5.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "source \"C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5.mel\";AdvancedSkeleton5;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 39
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Selector:biped" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Selector:biped" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/asBiped.png" 
        -image1 "C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/asBiped.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "source \"C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/Selector/biped.mel\";" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 39
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Selector:face" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Selector:face" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/asFace.png" 
        -image1 "C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/asFace.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "source \"C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/Selector/face.mel\";" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 39
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "picker" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "picker" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/picker/pickerFiles/icons/picker.png" 
        -image1 "C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/picker/pickerFiles/icons/picker.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "source \"C:/Users/leandro_laa/Documents/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/picker/picker.mel\";" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\nimport maya.mel as mel\nimport time\nimport subprocess\n\n'''\n# Version\nversionHider = 'FCM_Hider Beta 2.2'\n\n- support python 3\n- Fixing some miss-spells in message declaration\n- \n\n'''\n\n\n# Annotations for popUp help:\nallSets_Ann = 'Left Click:\\n -Switch between Show and Hide set\\n\\nRight click options:\\n- Remove all the Body sets\\n- Select all content of the set\\n- Remove all the Extra sets'\nblueButtons_Ann = 'Left Click:\\n -Switch between Show and Hide set\\n\\nRight click options:\\n- Add your current selection to the current set\\n- Remove your current selection from the current set\\n- Select all content of the set\\n- Remove all content from the current set'\ntemplateLine_Ann = 'This button allows you to select the usual line between the elbow control and the pole vector control that is mostly unselectable'\neditMode_Ann = 'Toggle between Usage and Edit mode'\naddSel_Ann = 'Add your current selection to the current set'\naddSelExtra_Ann = 'Add your current selection to the current set (Only shapes and polygons)'\ngrow_Ann = 'Grow selection'\nshrink_Ann = 'Shrink selection'\nswitchPolyOrNurbsCurves_Ann = 'Left Click:\\n-Switch between Poly selection and NurbsCurves\\nRight Click:\\n-Change poly color selection'\nobjectMode_Ann = 'Object Mode'\ndeleteAll_Ann = 'Delete everything related to the script'\nhelp_Ann = 'Open help window'\nshowAllHiddenFaces_Ann = 'Show all hidden faces in the scene'\ncheckAllSets_Ann = 'Turn OFF and ON two times each set to check the overall setup'\nmirrorButtons_Ann = 'Mirror right Arm and Leg content to the left ones'\nunlockAllVisMeshes_Ann = 'Make selectable all visible meshes and unlock all layer display on the scene'\nunlockAllVis_Ann = 'Make selectable all: mesh shape, nurbsCurve shape, transform, annotation shape of the scene'\nlockSelection_Ann = 'Make all the items selected unselectables'\nrightClickToSeeButtons_Ann = 'Right click to see the buttons'\n# Prints\nsetsExportSucces = 'Sets exported succesfully!'\nsetsLoadSucces = 'Sets loaded succesfully!'\nsetHided = 'Set hidden'\nsetVisible = 'Set Visible'\nallVisMeshSelectable = 'All visible meshes are selectable, and all layerDisplay are unlocked'\nallBodySetsRemoved = 'All Body sets removed' \nallExtraSetsRemoved = 'All Extra sets removed'\nkeepYourSecrets = 'Alright then, keep your secrets' \nallRemoved = 'everything related to FCM_Hider Removed'\nselRemoved = 'Selection removed'\n# Warnings\nallFacesAreVisible = 'All faces are visible'\nsetDoesntExistsSet = 'Set doesn\\'t exists'\nhiderSystemWarning = 'There is more than one Hider system, select the character you want to run'\nconfirmCheckAllSets = 'This may take a while, do you want to check them?'\nnothingSel = 'Nothing selected' \nsetDontExists = 'Set doesn\\'t exist'\ncouldntUnlockAllMeshes = \"Couldn't unlock all the meshes because they are in a layerDisplay, check if you can unlock them trough layer display\"\ncouldntUnlockAllLayerDisplay = \"Couldn't unlock all layerDisplay\"\nnothingSelected = 'Nothing selected'\n# Error\nerrorLoadSets = 'Error trying to load the set, Try to set the namespace the same than when you export the file' \nerrorExportSets = 'You can only save sets created in the scene'\n\n# PromptWindows\nremoveAllConfirm = 'Are you sure you want to delete everything related to the script?'\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                CREATE SETTINGS AND SETS\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef declaringSets():\n    global namespaceHider, All_Sets_Hider, Head_Hider, Torso_Hider, Arm_R_Hider, Arm_L_Hider, Leg_R_Hider, Leg_L_Hider, Extra_One_Hider, Extra_Two_Hider, Extra_Three_Hider, FCM_Hider_Settings\n    All_Sets_Hider = ( namespaceHider + 'All_Sets_Hider' )\n    Head_Hider = ( namespaceHider + 'Head_Hider' )\n    Torso_Hider = ( namespaceHider + 'Torso_Hider' )\n    Arm_R_Hider = ( namespaceHider + 'Arm_R_Hider' )\n    Arm_L_Hider = ( namespaceHider + 'Arm_L_Hider' )\n    Leg_R_Hider = ( namespaceHider + 'Leg_R_Hider' )\n    Leg_L_Hider = ( namespaceHider + 'Leg_L_Hider' )\n    Extra_One_Hider = ( namespaceHider + 'Extra_One_Hider' )\n    Extra_Two_Hider = ( namespaceHider + 'Extra_Two_Hider' )\n    Extra_Three_Hider = ( namespaceHider + 'Extra_Three_Hider' )\n    FCM_Hider_Settings = ( namespaceHider + 'FCM_Hider_Settings' )\n#-----------------------------------------------------------#\ndef createAllSets():\n    global namespaceHider, All_Sets_Hider, Head_Hider, Torso_Hider, Arm_R_Hider, Arm_L_Hider, Leg_R_Hider, Leg_L_Hider, Extra_One_Hider, Extra_Two_Hider, Extra_Three_Hider, FCM_Hider_Settings\n    if cmds.objExists('All_Sets_Hider') == 0:cmds.sets(n='All_Sets_Hider', em=True)\n    if cmds.objExists(Head_Hider) == 0:cmds.sets(n=Head_Hider, em=True)\n    if cmds.objExists(Torso_Hider) == 0:cmds.sets(n=Torso_Hider, em=True)\n    if cmds.objExists(Arm_R_Hider) == 0:cmds.sets(n=Arm_R_Hider, em=True)\n    if cmds.objExists(Arm_L_Hider) == 0:cmds.sets(n=Arm_L_Hider, em=True)\n    if cmds.objExists(Leg_R_Hider) == 0:cmds.sets(n=Leg_R_Hider, em=True)\n    if cmds.objExists(Leg_L_Hider) == 0:cmds.sets(n=Leg_L_Hider, em=True)\n    if cmds.objExists(Extra_One_Hider) == 0:cmds.sets(n=Extra_One_Hider, em=True)\n    if cmds.objExists(Extra_Two_Hider) == 0:cmds.sets(n=Extra_Two_Hider, em=True)\n    if cmds.objExists(Extra_Three_Hider) == 0:cmds.sets(n=Extra_Three_Hider, em=True)\n    # parent all sets to All_Sets_Hider\n    cmds.sets (Head_Hider, Torso_Hider, Arm_R_Hider, Arm_L_Hider, Leg_R_Hider, Leg_L_Hider,\n    Extra_One_Hider, Extra_Two_Hider, Extra_Three_Hider, edit=True, fe='All_Sets_Hider' )\n#-----------------------------------------------------------#\ndef createSettingsHider():\n    if cmds.objExists ('FCM_Hider_Settings') == 0:\n        selCurrent = cmds.ls (sl=True)\n        cmds.group (em=True, n= 'FCM_Hider_Settings')\n        cmds.setAttr (\".tx\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".ty\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".tz\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".rx\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".ry\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".rz\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".sx\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".sy\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".sz\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".v\", lock=True, keyable=False, channelBox=False )\n        # Create Attr States\n        cmds.addAttr ('FCM_Hider_Settings', ln='All_Sets_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Head_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Torso_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Arm_R_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Arm_L_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Leg_L_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Leg_R_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Extra_One_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Extra_Two_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Extra_Three_Hider_State',at='bool', dv=True, keyable=True)\n        # Create Attr Edit Mode\n        cmds.addAttr ('FCM_Hider_Settings', ln='Edit_Mode_State',at='bool', dv=True, keyable=True)\n\n        # Select current\n        cmds.select(selCurrent)\n#-----------------------------------------------------------#   \ndef createHiderInTheScene():\n    global namespaceHider, namespaceHiderForWindow\n    # nameSpace empty\n    namespaceHider = ''    \n    namespaceHiderForWindow = 'Created in the scene'\n    # declaring sets\n    declaringSets()\n    # Create settings and all sets\n    createSettingsHider()\n    createAllSets()\n    \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    DECLARING NAMESPACES \n            \n''''''''''''''''''''''''''''''''''''''''''''''''''''''''' \n\ndef declaringNameSpaces():\n    global namespaceHider, namespaceHiderForWindow\n    # Check if Hider system exists and if there is more than one\n    currentSel = cmds.ls(sl=True)\n    if cmds.objExists('*:FCM_Hider_Settings'):\n        cmds.select('*:FCM_Hider_Settings')\n        try:\n            cmds.select('FCM_Hider_Settings',tgl=True)\n        except:\n            pass    \n        settings = cmds.ls(sl=True)\n        \n        # if there is more than one\n        if len(settings) >= 1:\n            try:\n                # works depending selection\n                try:\n                    # if the selection is referenced\n                    # Query nameSpace\n                    namespaceHiderForWindow = cmds.referenceQuery( currentSel[0], namespace=True, shortName=True )\n                    namespaceHider = namespaceHiderForWindow + \":\" \n                    declaringSets()\n                except:\n                    createHiderInTheScene()\n            except:\n                cmds.warning(hiderSystemWarning)\n    else:\n        createHiderInTheScene()\n        \n    cmds.select(currentSel)\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                PRIMARY FUNCTIONS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n#-----------------------------------------------------------#    \ndef queryAllSet():\n    global allSet, polys, shapes, transformAndShapeSet\n\n    # Query all set\n    allSet = cmds.sets(setHider, q=True, )\n    # Query transform\n    transformAndShapeSet = cmds.ls(allSet, type= [ 'transform','shape']  )\n    # Query polys\n    polys = cmds.filterExpand(allSet, sm=34)\n    # Query meshShapes from polys\n    try:\n        shapes = []\n        for poly in polys:\n            shape = cmds.listRelatives(poly, s=True, p=True, fullPath=True)\n            shapes.append(shape)\n        shapes \n        def getUniqueItems(iterable):\n            result = []\n            for item in iterable:\n                if item not in result:\n                    result.append(item)\n            return result\n            \n            print (''.join(getUniqueItems(list('apple'))))\n        shapes = getUniqueItems(shapes)\n    except:\n        pass\n\n\n#-----------------------------------------------------------#\ndef addSelectionToSet():\n    global setHider\n    try:\n        sel = cmds.ls(sl=True, l=True)\n        if len(sel) > 0:\n            if cmds.objExists(setHider):\n                # Add selection to set\n                # If the setHider is Extra will query shape, if is Normal will query transform\n                removeNameSpace()\n\n                if shapeMode == 'On':\n                    addNameSpace()\n                    shapesCtrl = cmds.listRelatives(sel, s=True, fullPath=True)\n                    polys = cmds.filterExpand(sel, sm=34, fullPath=True)\n                    cmds.sets (shapesCtrl, edit=True, forceElement=setHider)\n                    cmds.sets (polys, edit=True, forceElement=setHider)\n                if shapeMode == 'Off':\n                    addNameSpace()\n                    cmds.sets (sel, edit=True, forceElement=setHider)\n                # Query all\n                queryAllSet()\n                # Hide set\n                hideSet()\n                # Turn on display invisible faces for shapes\n                for shape in shapes:\n                    cmds.polyOptions (shape, displayInvisibleFaces=1)\n                # Deselect\n                cmds.select(cl=True)\n        else:\n            cmds.warning(nothingSelected)\n    except:\n        createSettingsHider()\n#-----------------------------------------------------------#\ndef hidePolys():\n    global setHider, lastPolys, lastPoly\n    queryAllSet()\n    try:\n        cmds.hide(polys)\n    except:\n        # get the last polygon for every shape in set\n        lastPolys = []\n        # query lastPoly for every shape\n        for shape in shapes:\n            desgote = cmds.filterExpand(shape[0] +'.f[*]', sm=34, fullPath=True)\n            cmds.select(desgote[-1])\n            sel = cmds.ls(sl=True)\n            lastPolys.append(sel)\n        # remove last poly for every shape\n        for lastPoly in lastPolys:\n            # Show lastPoly\n            cmds.showHidden(lastPoly)\n            for poly in polys:\n                if poly == lastPoly[0]:\n                    polys.remove(poly)        \n        # Hide all polys except the last one for each shapemesh            \n        cmds.hide(polys)\n        # Hide last poly for each shapeMesh, and select each shape just for avoid bug\n        for lastPoly in lastPolys:\n            cmds.polyHole(lastPoly[0], assignHole = 1)\n        for shape in shapes:\n            cmds.select(shape)\n###############\ndef showPolys():\n    global setHider\n    try:\n        removeNameSpace()\n        if cmds.getAttr(FCM_Hider_Settings + '.' + setHider + '_State') == 0:\n            addNameSpace() \n            # show all polys in set\n            try:\n                cmds.showHidden(polys)\n                \n                # query lastPoly for every shape\n                lastPolys = []\n                queryAllSet()\n                for shape in shapes:\n                    desgote = cmds.filterExpand(shape[0] +'.f[*]', sm=34, fullPath=True)\n                    cmds.select(desgote[-1])\n                    sel = cmds.ls(sl=True)\n                    lastPolys.append(sel)\n                # remove last poly for every shape\n                for lastPoly in lastPolys:\n                    for poly in polys:\n                        if poly == lastPoly[0]:\n                            polys.remove(poly)\n                # Show last poly for each shapeMesh, and select each shape just for avoid bug\n                for lastPoly in lastPolys:\n                    cmds.polyHole(lastPoly[0], assignHole = 0)\n                \n            except:\n                pass\n    except:\n        pass\n#-----------------------------------------------------------#\ndef hideSet():\n    global setHider, namespaceHider\n    if cmds.objExists(setHider):\n        try:\n            ############\n            value = 0  #\n            ############\n            currentSel = cmds.ls (sl=True)\n            # Query all\n            queryAllSet()\n            ## set visibility for transform OFF\n            # Check if is Extra or Normal, for Extras it will hide only shapes\n\n            for item in transformAndShapeSet:\n                try:\n                    cmds.setAttr(item + '.visibility', value)\n                except:\n                    cmds.setAttr(item + '.lodVisibility', value)\n            # Set visibility for polys OFF\n            hidePolys()\n            # select current sel\n            cmds.select (currentSel)\n            # print\n            print (setHided),\n        except:\n            createSettingsHider()\n    else:\n        cmds.warning(\"set doesn't exists\")\n    \n    ######################\n    # Remove namespace for this operation\n    removeNameSpace()\n    # Set Attr State to Off    \n    cmds.setAttr( FCM_Hider_Settings + '.' + (setHider + '_State'), 0)\n    # Turn off Icon\n    checkStateIcon()\n#-----------------------------------------------------------#\ndef showSet():\n    global setHider, namespaceHider\n    if cmds.objExists(setHider):\n        ############\n        value = 1  #\n        ############\n        currentSel = cmds.ls (sl=True)\n        # Query all\n        queryAllSet()\n        ## set visibility for transform ON\n        for item in transformAndShapeSet:\n            try:\n                cmds.setAttr(item + '.visibility', value)\n            except:\n                cmds.setAttr(item + '.lodVisibility', value)\n        # Set visibility for polys ON\n        showPolys()\n        # select current sel\n        cmds.select (currentSel)\n        # print\n        print (setVisible),\n    else:\n        cmds.warning(setDoesntExists)\n    #----------------------------#\n    # Remove namespace for this operation\n    removeNameSpace()\n    # Set Attr State to On\n    cmds.setAttr( FCM_Hider_Settings + '.' + (setHider + '_State'), 1)\n    # Turn off Icon\n    checkStateIcon()\n#-----------------------------------------------------------#\ndef showOrHideButton():\n    global setHider\n    \n    # Check settings\n    try:\n        contentSet = cmds.sets(setHider, q=True)\n        # check if it's empty\n        if str(contentSet) == 'None':\n            cmds.warning('Set empty')\n        else:\n            removeNameSpace()\n            if cmds.getAttr( FCM_Hider_Settings + '.' + (setHider + '_State') ):\n                addNameSpace()\n                hideSet()\n            else:\n                addNameSpace()\n                showSet()\n    except:\n        createSettingsHider()\n        checkAllIconSets()\n#-----------------------------------------------------------#\ndef ShowOrHideAllSetsButton():   \n    global choise    \n    if cmds.getAttr(FCM_Hider_Settings + '.All_Sets_Hider_State'):\n        choise = 'hide'; ShowOrHideAllSets()\n    else:\n        choise = 'show'; ShowOrHideAllSets()\n#-----------------------------------------------------------#\ndef checkStateIcon():\n    global setHider, namespaceHider\n    try:\n        '''\n        # # # check if All_Sets_Hider is empty # # #\n        allSets = cmds.sets(All_Sets_Hider, q=True)\n        result = []\n        for set in allSets:\n            contentSet = cmds.sets(set, q=True)\n            result.append(contentSet)\n            if result == [None, None, None, None, None, None, None, None, None]:\n                # Set icon Empty\n                cmds.iconTextButton ( (All_Sets_Hider + \"button\"), e=True, image=(\"Icons_Hider/\" + 'All_Sets_Hider' + \"_Empty\" + \".png\") )\n            else:\n                # All sets hider is not empty\n                # Check settings\n                if cmds.getAttr( (FCM_Hider_Settings + '.All_Sets_Hider_State') ):\n                    # Icon On\n                    cmds.iconTextButton ( (All_Sets_Hider + \"button\"), e=True, image=(\"Icons_Hider/\" + All_Sets_Hider + \".png\") )\n                else:\n                    # Icon Off\n                    cmds.iconTextButton ( (All_Sets_Hider + \"button\"), e=True, image=(\"Icons_Hider/\" + All_Sets_Hider + \"_Off\" + \".png\") )\n        '''\n        #------------------------------------------#\n        # # # Check body and extra icon # # # \n        # query set\n        addNameSpace()\n        contentSet = cmds.sets(setHider, q=True)\n        # check if it's empty\n        if str(contentSet) == 'None':\n            removeNameSpace()\n            cmds.iconTextButton ( (setHider + \"button\"), e=True, image=(\"Icons_Hider/\" + setHider + \"_Empty\" + \".png\") )\n        else:\n            removeNameSpace()\n            # Check settings\n            if cmds.getAttr( FCM_Hider_Settings + '.' + (setHider + '_State') ):\n                # Icon On\n                cmds.iconTextButton ( (setHider + \"button\"), e=True, image=(\"Icons_Hider/\" + setHider + \".png\") )\n            else:\n                # Icon Off\n                cmds.iconTextButton ( (setHider + \"button\"), e=True, image=(\"Icons_Hider/\" + setHider + \"_Off\" + \".png\") )\n    except:\n        pass\n#-----------------------------------------------------------#\ndef checkAllIconSets():\n    global setHider\n    setHider = Head_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Torso_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Arm_R_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Arm_L_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Leg_R_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Leg_L_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Extra_One_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Extra_Two_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Extra_Three_Hider; removeNameSpace(); checkStateIcon()\n\n#-----------------------------------------------------------#\ndef ShowOrHideAllSets():\n    global setHider\n    sets_In_AllSetsHider = cmds.sets(All_Sets_Hider,q=True)\n    # check if is empty\n    result = []    \n    for set in sets_In_AllSetsHider:\n        contentSet = cmds.sets(set, q=True)\n        result.append(contentSet)\n    if result == [None, None, None, None, None, None, None, None, None]:\n        cmds.warning('Set empty')\n        # if set is not empty\n    else:\n        for set in sets_In_AllSetsHider:\n            setHider = set\n            # Hide or Show all sets depending of choise before calling function\n            if choise == 'show':\n                showSet()\n                cmds.setAttr( FCM_Hider_Settings + '.All_Sets_Hider_State', 1)\n            if choise == 'hide':\n                hideSet()\n                cmds.setAttr( FCM_Hider_Settings + '.All_Sets_Hider_State', 0)\n        # Turn on Icon\n        checkStateIcon()\n\n#-----------------------------------------------------------#\ndef selectSet():\n    if cmds.objExists(setHider):\n        cmds.select(setHider)\n    else:\n        cmds.warning(\"set doesn't exists\")\n#-----------------------------------------------------------#\ndef showAllHiddenFaces():\n    if cmds.objExists('defaultHideFaceDataSet'):\n        cmds.showHidden('defaultHideFaceDataSet')\n        print(allFacesAreVisible),\n    else:\n        cmds.warning('No faces hidded')\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    LOCK FUNCTIONS\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef unlockAllVismeshes():\n    # Query \n    shapesAndShapesOrig = cmds.ls (v=True, type='mesh')\n    meshes = cmds.filterExpand(shapesAndShapesOrig, sm= 12 )\n    groups = cmds.ls(type='transform')\n    groupsAndMeshes = groups + meshes\n    try:\n        # For meshes\n        for item in groupsAndMeshes:\n            if cmds.getAttr (item + '.overrideDisplayType') == 2:\n                cmds.setAttr (item + '.overrideDisplayType', 0)\n    except:\n        pass\n    try:\n        # For displayLayers\n        displayLayers = cmds.ls(type='displayLayer', l=True) \n        for ld in displayLayers:\n            cmds.setAttr(ld + '.displayType', 0)     \n    except:\n        pass\n    print (allVisMeshSelectable),\n#-----------------------------------------------------------#\ndef unlockAllVisible():\n    # Query current Sel\n    currentSel = cmds.ls(sl=True)\n    # Querys\n    transform = cmds.ls(type='transform', v=True)\n    mesh = cmds.ls(type='mesh', v=True)\n    annotationShapes = cmds.ls(type='annotationShape')\n    visNurbsShapes = cmds.ls(type='nurbsCurve', v=True)\n    visNurbsTransform = cmds.ls(cmds.pickWalk (visNurbsShapes, d='up') )\n    \n    # Add all to nodes\n    nodes = annotationShapes + visNurbsTransform + visNurbsShapes + transform + mesh\n    \n    for item in nodes:\n        try:\n            cmds.setAttr(item + '.overrideDisplayType', 0)\n            cmds.setAttr(item + '.template', 0)\n        except:\n            pass\n    #-------------------#\n    try:\n        # For displayLayers\n        displayLayers = cmds.ls(type='displayLayer', l=True)\n        # For displayLayers\n        displayLayers = cmds.ls(type='displayLayer', l=True) \n        for ld in displayLayers:\n            cmds.setAttr(ld + '.displayType', 0)     \n    except:\n        pass\n    cmds.select(currentSel)\n    print ('All selectable'),\n#-----------------------------------------------------------#\ndef lockSelection():  \n    # Query \n    sel = cmds.ls(sl=True)\n    if len(sel) > 0:\n        selShape = cmds.ls(cmds.pickWalk (sel, d='down') )\n        # Add all to nodes\n        nodes = sel + selShape \n        \n        for item in nodes:\n            try:\n                cmds.setAttr(item + '.overrideDisplayType', 1)\n            except:\n                pass\n        \n        print ('Selection Locked'),\n    else:\n        cmds.warning(nothingSelected)\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    REMOVE FUNCTIONS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef removeAllBodySets():\n    global setHider\n    currentSel = cmds.ls(sl=True)\n    if cmds.objExists(Head_Hider):setHider = Head_Hider;removeSet()\n    if cmds.objExists(Torso_Hider):setHider = Torso_Hider;removeSet()\n    if cmds.objExists(Arm_R_Hider):setHider = Arm_R_Hider;removeSet()\n    if cmds.objExists(Arm_L_Hider):setHider = Arm_L_Hider;removeSet()\n    if cmds.objExists(Leg_R_Hider):setHider = Leg_R_Hider;removeSet()\n    if cmds.objExists(Leg_L_Hider):setHider = Leg_L_Hider;removeSet()\n    cmds.select(currentSel)\n    print(allBodySetsRemoved), \n#-----------------------------------------------------------#\ndef removeAllExtraSets():\n    global setHider\n    currentSel = cmds.ls(sl=True)\n    if cmds.objExists(Extra_One_Hider):setHider = Extra_One_Hider;removeSet()\n    if cmds.objExists(Extra_Two_Hider):setHider = Extra_Two_Hider;removeSet()\n    if cmds.objExists(Extra_Three_Hider):setHider = Extra_Three_Hider;removeSet()\n    cmds.select(currentSel)\n    print(allExtraSetsRemoved), \n#-----------------------------------------------------------#\ndef removeAllHider():\n    removeAllBodySets()\n    removeAllExtraSets()\n    if cmds.objExists(FCM_Hider_Settings):cmds.delete(FCM_Hider_Settings)\n    if cmds.objExists('All_Sets_Hider'):cmds.delete('All_Sets_Hider')\n    if cmds.window (\"windowHider\", exists=True):\n        cmds.deleteUI (\"windowHider\")\n    print(allRemoved), \n################\ndef confirmRemoveAllHider():\n    response = cmds.confirmDialog(\n                    title='Confirm Window',\n                    message=removeAllConfirm, \n                    button=['Yes', 'No'],\n                    defaultButton='Yes',\n                    cancelButton='Cancel',\n                    dismissString='Cancel')\n    if response == 'Yes':\n        removeAllHider()\n    if response == 'No':    \n        print(keepYourSecrets), \n#-----------------------------------------------------------#\ndef removeSet():\n    global setHider\n    # Show set\n    showSet()\n    # Query all set\n    allSet = cmds.sets(setHider, q=True)\n    # Remove all from set\n    cmds.sets(allSet, edit=True, rm=setHider)\n    checkStateIcon()\n#-----------------------------------------------------------#\ndef removeSelection():\n    global setHider\n    # Query sel\n    sel = cmds.ls(sl=True)\n    if len(sel) > 0:\n        if cmds.objExists(setHider):\n            value = 1\n\n            # Query Transform\n            transformSel = cmds.ls(sl=True, type='transform')\n            # Query Polys\n            polysSel = cmds.filterExpand(sel, sm=34, fullPath=True)\n            # Query Shape\n            shapesSel = cmds.listRelatives(sel, s=True)\n            # Remove shapes from set\n            cmds.sets (shapesSel, edit=True, rm=setHider)\n            # Remove sel from Set\n            cmds.sets (sel, edit=True, rm=setHider)\n\n            try:\n                # Set shape visibility ON\n                for item in shapesSel:\n                    try:\n                        cmds.setAttr(item + '.visibility', value)\n                    except:\n                        cmds.setAttr(item + '.lodVisibility', value)\n            \n            except:\n                pass\n            \n            # Set transfom visibility ON\n            for item in transformSel:\n                try:\n                    cmds.setAttr(item + '.visibility', value)\n                except:\n                    cmds.setAttr(item + '.lodVisibility', value)\n            if value == 1:\n                value = 0\n            # Set polys visibility ON Method 1\n            cmds.showHidden(polysSel)\n            # Set polys visibility ON Method 2\n            try:\n                for poly in polysSel:\n                    cmds.polyHole (poly, assignHole = value)\n            except:\n                pass\n            checkStateIcon()\n            print(selRemoved), \n        else:\n            cmds.warning(setDontExists) \n    else:\n        cmds.warning(nothingSel)\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    NAMESPACES DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef queryNamespace():\n    # Query nameSpace\n    namespaceHider = cmds.referenceQuery( '*:FCM_Hider_Settings', namespace=True, shortName=True )\n    # add \":\"\n    namespaceHider = namespaceHider + \":\"\n\n#-----------------------------------------------------------#    \ndef removeNameSpace():\n    global setHider, namespaceHider\n    if len(namespaceHider) > 0:\n        numberNS = len(namespaceHider)\n        setHider = setHider[numberNS:]\n\n#-----------------------------------------------------------#    \ndef addNameSpace():\n    global setHider, namespaceHider\n    if len(namespaceHider) > 0:\n        setHider = namespaceHider+setHider\n        \n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                SAVE AND LOAD SETS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef saveSetsHider():\n    if namespaceHiderForWindow == 'Created in the scene':\n        # just in case\n        createAllSets()\n        # Declare sets\n        allSets = [Head_Hider,Torso_Hider,Arm_R_Hider,Arm_L_Hider,\n        Leg_R_Hider,Leg_L_Hider, Extra_One_Hider,Extra_Two_Hider,Extra_Three_Hider]    \n        # Open save file window\n        SourceFile = cmds.fileDialog2(startingDirectory =\"/usr/u/bozo/myFiles/\", fileFilter=\"Python File(*.py)\")\n        SourceFile = ''.join([str(elem) for elem in SourceFile]) \n        # Open file (overwrite mode)\n        fileHandle = open(  (SourceFile ), 'w' )\n        # write remove existent set\n        fileHandle.write(\"## Remove existent sets\\n\" + \"removeAllBodySets()\\n\" + \"removeAllExtraSets()\\n\")\n        # Write create All_Sets_Hider set\n        fileHandle.write( \"## Create all sets\\n\"+ \"createAllSets()\\n\" + \"## Select each set content and create set\\n\")\n        for set in allSets:       \n            # Query content\n            setContent = cmds.sets(set, q=True )\n            if str(setContent) == 'None':\n                pass\n            else:\n                # write open selection\n                fileHandle.write('cmds.select(')\n                # write every item in the selection\n                for item in setContent:\n                    fileHandle.write('\"'+ item+'\",')\n                # write: close selection and add new line\n                fileHandle.write(')'+'\\n')\n                # write: create set with selection\n                fileHandle.write( 'cmds.sets( edit=True, fe=' + set + ')\\n')\n        # write create settings and run UI\n        fileHandle.write(\"## Select clear\\n\" + \"cmds.select(cl=True)\\n\")\n        # write HiderUI\n        fileHandle.write(\"## Check all icons\\n\" + \"checkAllIconSets()\")\n        # close file\n        fileHandle.close()\n        # Print\n        print(setsExportSucces), \n    else:\n        cmds.confirmDialog( title='FCM Hider Warning', message=errorExportSets, button='Ok')\n\ndef LoadSetsHider():\n    try:\n        # Open file\n        SourceFile = cmds.fileDialog(m=0)\n        # Read file\n        with open(SourceFile, 'r') as filehandle:\n            filecontent = filehandle.read()\n        # Execute file\n        exec(filecontent)\n        print(setsLoadSucces), \n    except:\n        cmds.error(errorLoadSets)\n     \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    WINDOW FUNCTIONS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef inViewMessageHider():\n    # For using inViewMessage using the messageHider variable\n    global messageHider\n    cmds.inViewMessage (amg=\"<span style=\\\"color:#82C99A;\\\"> \"+messageHider+\" </span> \", \n    dragKill=True, pos='topCenter',fade=True)\n#-----------------------------------------------------------#  \ndef toggleEditMode():\n    if cmds.window ('windowHider',q=True, h=True) == (36 + highWindow) :\n        # Edit mode ON\n        # change icon\n        cmds.iconTextButton ('Edit_Modebutton', e=True,\n        image1=\"Icons_Hider/Contract_Hider.png\")\n        # change window size\n        cmds.window ('windowHider', edit=True, w=widthWindow, h=(74 + highWindow))\n        # set settings\n        cmds.setAttr (FCM_Hider_Settings +'.Edit_Mode_State', 1)\n    else:\n        # Edit mode OFF\n        # change icon\n        cmds.iconTextButton ('Edit_Modebutton', e=True,\n        image1=\"Icons_Hider/Expand_Hider.png\")\n        # change window size\n        cmds.window ('windowHider', edit=True, w=widthWindow, h=(36 + highWindow))\n        # set settings\n        cmds.setAttr (FCM_Hider_Settings+'.Edit_Mode_State', 0)\n###############\ndef checkEditMode():\n    if cmds.getAttr( FCM_Hider_Settings + '.Edit_Mode_State' ):\n        # Edit mode ON\n        # change icon\n        cmds.iconTextButton ('Edit_Modebutton', e=True,\n        image1=\"Icons_Hider/Contract_Hider.png\")\n    \n        # change window size\n        cmds.window ('windowHider', edit=True, w=widthWindow, h= (74 + highWindow) )\n    else:\n        # Edit mode ON\n        # change icon\n        cmds.iconTextButton ('Edit_Modebutton', e=True,\n        image1=\"Icons_Hider/Expand_Hider.png\")\n        # change window size\n        cmds.window ('windowHider', edit=True, w=widthWindow, h= (36 + highWindow))\n#-----------------------------------------------------------#\ndef objectModeHider():\n    global messageHider\n    # Object mode\n    cmds.selectMode(object=True)\n    # selectType all active\n    mel.eval('selectMode -object; selectType -handle 1 -ikHandle 1 -joint 1 -nurbsCurve 1 -cos 1 -stroke 1 -nurbsSurface 1 -polymesh 1 -subdiv 1 -plane 1 -lattice 1 -cluster 1 -sculpt 1 -nonlinear 1 -particleShape 1 -emitter 1 -field 1 -spring 1 -rigidBody 1 -fluid 1 -hairSystem 1 -follicle 1 -nCloth 1 -nRigid 1 -dynamicConstraint 1 -rigidConstraint 1 -collisionModel 1 -light 1 -camera 1 -texture 1 -ikEndEffector 1 -locator 1 -dimension 1;selectType -byName gpuCache 1;')\n    mel.eval('selectMode -component; selectType -cv 1 -vertex 1 -subdivMeshPoint 1 -latticePoint 1 -particle 1 -editPoint 0 -curveParameterPoint 0 -surfaceParameterPoint 0 -puv 0 -polymeshEdge 0 -subdivMeshEdge 0 -isoparm 0 -surfaceEdge 0 -surfaceFace 1 -springComponent 0 -facet 0 -subdivMeshFace 1 -hull 0 -rotatePivot 0 -scalePivot 0 -jointPivot 0 -selectHandle 0 -localRotationAxis 0 -imagePlane 0;')\n    mel.eval('changeSelectMode -object')#-----------------------------------------------------------#\n    # inView Message\n    messageHider = 'Object Mode'; inViewMessageHider()\n\ndef switchPolyOrNurbsSel():\n    global messageHider\n    if cmds.iconTextButton('toggleFacesNurbsCurve', q=True, i=True) == \"Icons_Hider/Only_Faces_Hider.png\":\n        # # Select only nurbsCurve # #\n        # object mode\n        objectModeHider()\n        # turn on curves CVs selection\n        cmds.selectType (cv=True)\n        # only curves\n        mel.eval('setObjectPickMask \"All\" 0;setObjectPickMask \"Curve\" true')\n        # inview message\n        messageHider = 'NurbsCurve selection Mode'; inViewMessageHider()\n        # change icon\n        cmds.iconTextButton ('toggleFacesNurbsCurve', e=True, i=\"Icons_Hider/Only_NurbsCurve_Hider.png\")\n    else:\n        # # Select only faces # #\n        mel.eval('changeSelectMode -component')\n        mel.eval('setComponentPickMask \"Facet\" true; ')\n        # turn off CVs point selection\n        cmds.selectType (cv=False)\n\n        # inview message\n        messageHider = 'Poly Faces selection Mode'; inViewMessageHider()\n        # change icon\n        cmds.iconTextButton ('toggleFacesNurbsCurve', e=True, i=\"Icons_Hider/Only_Faces_Hider.png\")\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                SELECT TEMPLATE LINE DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef growSelection():\n    cmds.select(cmds.listConnections (t='transform'))\ndef filterOnlyCurves():\n    sel = cmds.ls(sl=True)\n    onlyCurves = cmds.filterExpand(sel, sm=9, fullPath=True)\n    cmds.select(onlyCurves)\n    print( 'You have selected: ' + str(onlyCurves)),\ndef printSelected():\n    sel = cmds.ls(sl=True)\n    print( str(len(sel)) ),\n\ndef SelectTemplateLineWindow():\n    if cmds.window (\"Select_Template_Line\", exists=True ):\n        cmds.deleteUI (\"Select_Template_Line\")\n    selectTemplateLine = cmds.window (\"Select_Template_Line\", title=\"Select Template Line\", s=False)\n    cmds.columnLayout(adjustableColumn=True)\n    cmds.text(l='Usage: First select pole vector Ctrl\\nThen grow selection, Filter and add it to a Set', h=30, fn='boldLabelFont')\n    cmds.separator()\n    cmds.button(l='1- Grow selection', c='growSelection()')\n    cmds.separator()\n    cmds.button(l='2- Filter Only Curves', c='filterOnlyCurves()')\n    cmds.separator()\n    cmds.button(l='3- Print number selected', c='printSelected()')\n    cmds.showWindow( selectTemplateLine )\n    cmds.window ('Select_Template_Line', edit=True, w=300, h=110)\n    print('Select Template Line Window'),\ndef mirrorCtrlsHider():\n    global setHiderParent, setHiderChild\n    L_Content = []; finalContentL = []; L_item = []\n    for item in setHiderParent:\n        L_item = item.replace(R_Variable, L_Variable)\n        # check if L_item is diferent than R_item\n        if L_item != item:\n            L_Content.append(L_item)\n            for itemL in L_Content:\n                try:\n                    cmds.select(itemL)\n                    finalContentL.append(itemL)\n                    cmds.select(finalContentL)\n                    sel = cmds.ls(sl=True)\n                    cmds.sets(sel, fe=setHiderChild)\n                    cmds.select(cl=True)            \n                except:\n                        pass\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    MIRROR DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef mirrorCtrlsHider():\n    global setHiderParent, setHiderChild\n    L_Content = []; finalContentL = []; L_item = []\n    for item in setHiderParent:\n        L_item = item.replace(R_Variable, L_Variable)\n        # check if L_item is diferent than R_item\n        if L_item != item:\n            L_Content.append(L_item)\n            for itemL in L_Content:\n                try:\n                    cmds.select(itemL)\n                    finalContentL.append(itemL)\n                    cmds.select(finalContentL)\n                    sel = cmds.ls(sl=True)\n                    cmds.sets(sel, fe=setHiderChild)\n                    cmds.select(cl=True)            \n                except:\n                        pass\n\n#------------------------------#             \ndef tryNomenclaturesMirror():\n    global R_Variable, L_Variable\n    R_Variable = \"R_\"; L_Variable = \"L_\"; mirrorCtrlsHider()\n    R_Variable = \"_R\"; L_Variable = \"_L\"; mirrorCtrlsHider()\n    R_Variable = \"_R_\"; L_Variable = \"_L_\"; mirrorCtrlsHider()\n    R_Variable = \"r_\"; L_Variable = \"r_\"; mirrorCtrlsHider()\n    R_Variable = \"_r\"; L_Variable = \"_l\"; mirrorCtrlsHider()\n    R_Variable = \"_r_\"; L_Variable = \"_l_\"; mirrorCtrlsHider()\n    R_Variable = \"Right\"; L_Variable = \"Left\"; mirrorCtrlsHider()\n    R_Variable = \"right\"; L_Variable = \"left\"; mirrorCtrlsHider()\n    R_Variable = \"rt\"; L_Variable = \"lf\"; mirrorCtrlsHider()\n    R_Variable = \"Rt\"; L_Variable = \"Lf\"; mirrorCtrlsHider()\n    R_Variable = \"RGT\"; L_Variable = \"LFT\"; mirrorCtrlsHider()\n    R_Variable = \"Rgt\"; L_Variable = \"Lft\"; mirrorCtrlsHider()\n#------------------------------#             \ndef mirrorPolyHider():\n    cmds.select(setHiderParent)\n    mel.eval('reflectionSetMode objectx')\n    mel.eval('reflectionSetMode none')\n    cmds.select(setHiderParent, tgl=True)\n    # Add selection to child set\n    cmds.sets(fe=setHiderChild)\n    # Select clear\n    cmds.select(cl=True)\n#------------------------------#\n# Aca tendria que usar la funcion que me quedo en temp 3 para seleccionar objetos sueltos\n#------------------------------#\ndef mirrorHider():\n    global setHider, setHiderParent, setHiderChild\n    '''\n    # change icons for loading\n    cmds.iconTextButton (\"Arm_L_Hiderbutton\", e=True, i=\"Icons_Hider/Loading_Hider.png\")\n    cmds.iconTextButton (\"Leg_L_Hiderbutton\", e=True, i=\"Icons_Hider/Loading_Hider.png\")\n    # missing refresh icon\n    '''\n    try:\n        # Apply mirror from Arm_R_Hider to Arm_L_Hider\n        setHiderParent = cmds.sets(Arm_R_Hider, q=True)\n        setHiderChild = Arm_L_Hider\n        tryNomenclaturesMirror()\n        mirrorPolyHider()\n        setHider = Arm_L_Hider\n        checkStateIcon()\n        print ('Mirror succesuful'),\n    except:\n        setHider = Arm_L_Hider\n        checkStateIcon()\n\n    try:\n        # apply mirror from Leg_R_Hider to Leg_L_Hider\n        setHiderParent = cmds.sets(Leg_R_Hider, q=True)\n        setHiderChild = Leg_L_Hider\n        tryNomenclaturesMirror()\n        mirrorPolyHider()\n        setHider = Leg_L_Hider\n        checkStateIcon()\n        print ('Mirror succesuful'),\n    except:\n        setHider = Leg_L_Hider\n        checkStateIcon()\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    CHECK ALL SETS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef waitAndRefresh():\n    cmds.refresh(cv=True)\n    time.sleep(0.3)\n    cmds.refresh(cv=True)\n\ndef cycleTurnOnAndOff():\n    waitAndRefresh()\n    hideSet()\n    waitAndRefresh()\n    addNameSpace()\n    showSet()\n    waitAndRefresh()\n    addNameSpace()\n    hideSet()\n    waitAndRefresh()\n    addNameSpace()\n    showSet()\ndef checkAllSets():\n    global setHider, choise\n    \n    response = cmds.confirmDialog(\n                    title='Confirm Check all sets',\n                    message=confirmCheckAllSets,\n                    button=['Yes', 'No'],\n                    defaultButton='Yes',\n                    cancelButton='Cancel',\n                    dismissString='Cancel')\n    if response == 'Yes':\n        # show all sets\n        choise = 'show'; ShowOrHideAllSets()\n        # create All sets list with a specific order\n        allSetsCheck = [Head_Hider,Torso_Hider,Arm_R_Hider,Arm_L_Hider,\n        Leg_R_Hider,Leg_L_Hider, Extra_One_Hider,Extra_Two_Hider,Extra_Three_Hider]    \n        # create progress window\n        cmds.progressWindow( title='Progress Hider test', isInterruptable=True )                                 \n        amount = 0\n        for set in allSetsCheck:\n            cmds.progressWindow( edit=True, progress=amount, status= ('Testing: ' + set  ) )\n            setHider = set\n            cycleTurnOnAndOff()\n            amount = amount+11\n            # Check if the dialog has been cancelled\n            if cmds.progressWindow( query=True, isCancelled=True ) :\n                break\n            # Check if end condition has been reached\n            if cmds.progressWindow( query=True, progress=True ) >= 100 :\n                break    \n        cmds.progressWindow(endProgress=1)\n#-----------------------------------------------------------#############\ndef cycleTurnOnAndOffIsolate():\n    waitAndRefresh()\n    hideSet()\n    waitAndRefresh()\n    addNameSpace()\n    showSet()\n    waitAndRefresh()\n    addNameSpace()\n    hideSet()\n    waitAndRefresh()\n    addNameSpace()\n    showSet()\n    waitAndRefresh()\n    addNameSpace()\n    hideSet()\ndef checkAllSetsIsolate():\n    global setHider, choise\n    # Center view\n    # show all sets\n    choise = 'hide'; ShowOrHideAllSets()\n    # create All sets list with a specific order\n    allSetsCheck = [Head_Hider,Torso_Hider,Arm_R_Hider,Arm_L_Hider,\n    Leg_R_Hider,Leg_L_Hider, Extra_One_Hider,Extra_Two_Hider,Extra_Three_Hider]\n    # create progress window\n    cmds.progressWindow( title='Progress Hider test', isInterruptable=True )                                 \n    amount = 0\n    for set in allSetsCheck:\n        cmds.progressWindow( edit=True, progress=amount, status= ('Testing: ' + set  ) )\n        setHider = set\n        cycleTurnOnAndOffIsolate()\n        amount = amount+11\n        # Check if the dialog has been cancelled\n        if cmds.progressWindow( query=True, isCancelled=True ) :\n            break\n        # Check if end condition has been reached\n        if cmds.progressWindow( query=True, progress=True ) >= 100 :\n            break    \n    cmds.progressWindow(endProgress=1)\n    choise = 'show'; ShowOrHideAllSets()\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    HELP AND CONTACT WINDOW DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef launchtutorial():\n    cmds.launch (web=\"https://youtu.be/RDHIFQfD12g\")\n\ndef toggleImageHelpWindow():\n    if cmds.image(\"helpwindowimage\", q=True, image=True) == \"Icons_Hider/Help_2_On_Hider.png\":\n        cmds.image (\"helpwindowimage\", e=True, image=\"Icons_Hider/Help_2_Off_Hider.png\")\n    else:\n        cmds.image (\"helpwindowimage\", e=True, image=\"Icons_Hider/Help_2_On_Hider.png\")\n    \ndef helpWindow():\n    \n    if cmds.window ('HelpWindowHider', exists=True):\n        cmds.deleteUI (\"HelpWindowHider\")\n    # Window template\n    helpWindowHider = cmds.window('HelpWindowHider',  s=False, h=680, w=656, title=\"Help Window Hider\")\n    scrollLayout = cmds.scrollLayout(horizontalScrollBarThickness=20, verticalScrollBarThickness=16)\n\n    cmds.image(i=\"Icons_Hider/Help_1_Hider.png\")\n    form = cmds.formLayout()\n    # button toggle image\n    object = cmds.button (l=\"\", w=200, h=28, c=\"toggleImageHelpWindow()\", backgroundColor=[0.72,0.15,0.16])\n    cmds.formLayout (form, edit=True, attachForm= [[object, \"top\", 5], [object, \"left\", 215]])\n    # text toggle image\n    object = cmds.text(l='Press here repeatedly to see ', font='boldLabelFont')\n    cmds.formLayout (form, edit=True, attachForm= [[object, \"top\", 12], [object, \"left\", 240]])\n\n    cmds.setParent('..')\n\n    cmds.image('helpwindowimage',i=\"Icons_Hider/Help_2_On_Hider.png\")\n    \n    # Creating elements with custom position\n    form = cmds.formLayout()\n    \n    object = cmds.text (l=\"By Francisco Cerchiara Montero\", font='boldLabelFont')\n    cmds.formLayout (form, edit=True, attachForm= [[object, \"top\", 5], [object, \"left\", 470]])\n    \n    object = cmds.button (l=\"Link to online tutorial\", c=\"launchtutorial()\", backgroundColor=[0.72,0.15,0.16])\n    cmds.formLayout (form, edit=True, attachForm= [[object, \"top\", 0], [object, \"left\", 10]])\n    \n    cmds.setParent('..')\n    cmds.showWindow (helpWindowHider)\n\ndef contactWindow():\n    # Contact Window\n    if cmds.window (\"FCM_Contact\", exists=True ):\n        cmds.deleteUI (\"FCM_Contact\")\n    FCMContact = cmds.window (\"FCM_Contact\", title=\"Contact\", s=False)\n    \n    \n    cmds.rowColumnLayout( numberOfColumns=2, columnAttach=(1, 'right', 0), columnWidth=[(1, 100), (2, 250)] )\n    cmds.text( label='Name:  ' )\n    name = cmds.textField(text='Francisco Cerchiara Montero', editable=True)\n    cmds.text( label='Email:  ' )\n    address = cmds.textField(text='FranCM127@hotmail.com', editable=True)\n    cmds.text( label='Facebook:  ' )\n    phoneNumber = cmds.textField(text='www.facebook.com/Fran127', editable=True)\n    cmds.text( label='Linked-In:  ' )\n    email = cmds.textField(text='www.linkedin.com/in/francm3danimator/', editable=True)\n    \n    #    Attach commands to pass focus to the next field if the Enter\n    #    key is pressed. Hitting just the Return key will keep focus\n    #    in the current field.\n    #\n    cmds.textField( name, edit=True, enterCommand=('cmds.setFocus(\\\"' + address + '\\\")') )\n    cmds.textField( address, edit=True, enterCommand=('cmds.setFocus(\\\"' + phoneNumber + '\\\")') )\n    cmds.textField( phoneNumber, edit=True, enterCommand=('cmds.setFocus(\\\"' + email + '\\\")') )\n    cmds.textField( email, edit=True, enterCommand=('cmds.setFocus(\\\"' + name + '\\\")') )\n    \n    cmds.showWindow( FCMContact )\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    WINDOW HIDER DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n# Window Size\nhighWindow = 20\nwidthWindow = 388\n\n\n## For all buttons sets\ndef buttonWindowHider():\n    global shapeMode\n    removeNameSpace()\n    cmds.iconTextButton ( (setHider + \"button\"), style=\"iconOnly\",\n    ann=blueButtons_Ann, commandRepeatable=True, i=(\"Icons_Hider/\" + setHider + \".png\"),\n    c=commandButton ) \n    cmds.popupMenu(postMenuCommand = popUpButton)\n    cmds.menuItem (i=\"Icons_Hider/PopUp_Add_Hider.png\", l=\"Add Selection\", c= \"shapeMode = 'Off'; addSelectionToSet()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_Add_Hider.png\", l=\"Add Selection Shape\", c= \"shapeMode = 'On'; addSelectionToSet()\")\n    cmds.menuItem (divider=True)\n    cmds.menuItem (i=\"Icons_Hider/PopUp_Remove_Hider.png\", l=\"Remove Selection\", c= \"removeSelection()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_SelectSet_Hider.png\", l=\"Select Set\", c= \"selectSet()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_RemoveSet_Hider.png\", l=\"Remove Set\", c= \"removeSet()\")\n\ndef HiderUI():    \n    global blueButtons_Ann, commandButton, popUpButton, setHider\n    \n    \n    declaringNameSpaces()\n    createSettingsHider()\n\n    \n    if cmds.window ('windowHider', exists=True):\n        cmds.deleteUI (\"windowHider\")\n    windowHider = cmds.window (\"windowHider\", s=False, title= (\"FCM_Hider: \" + namespaceHiderForWindow), menuBar=True)\n    \n    ## ### ### ### ### #### Menu bar #### ### ### ### ### ###\n    # File\n    cmds.menu('FileMenu', label='File')\n    cmds.menuItem(l=\"Save Sets\", c=\"saveSetsHider()\")\n    cmds.menuItem(l=\"Load Sets\", c=\"LoadSetsHider()\")    \n    # Help\n    cmds.menu('HelpMenu', label='Help' )\n    cmds.menuItem( l='Video Tutorial', c=\"launchtutorial()\")\n    cmds.menuItem( l='Contact', c=\"contactWindow()\")\n    cmds.menuItem( l='About version', c=\"print(versionHider),\")\n\n    ## ### ### ### ### #### Column 1 #### ### ### ### ### ###\n\n    cmds.rowColumnLayout (numberOfColumns = 11)\n    # Edit Mode\n    cmds.iconTextButton ('Edit_Modebutton', i=\"Icons_Hider/Contract_Hider.png\", c=\"toggleEditMode()\", ann=editMode_Ann)\n    ## All sets\n    setHider = All_Sets_Hider\n    removeNameSpace()\n    cmds.iconTextButton ( (setHider + \"button\"),\n    ann=allSets_Ann, commandRepeatable=True, i=(\"Icons_Hider/\" + setHider + \".png\"),\n    c=\"cmds.warning('Show or Hide all WIP')\") \n    cmds.popupMenu(postMenuCommand = \"setHider = All_Sets_Hider\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_RemoveSet_Hider.png\", l=\"Empty Sets Body\", c=\"removeAllBodySets()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_RemoveSet_Hider.png\", l=\"Empty Sets Extras\", c=\"removeAllExtraSets()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_SelectSet_Hider.png\", l=\"Select All Sets\", c=\"cmds.select(All_Sets_Hider)\")\n    #-----------------------------------------------------------#\n    setHider = Head_Hider\n    commandButton = \"setHider = Head_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Head_Hider\"\n    buttonWindowHider()\n    \n    setHider = Torso_Hider\n    commandButton = \"setHider = Torso_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Torso_Hider\"\n    buttonWindowHider()\n    \n    setHider = Arm_R_Hider\n    commandButton = \"setHider = Arm_R_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Arm_R_Hider\"\n    buttonWindowHider()\n    \n    setHider = Arm_L_Hider\n    commandButton = \"setHider = Arm_L_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Arm_L_Hider\"\n    buttonWindowHider()\n    \n    setHider = Leg_R_Hider\n    commandButton = \"setHider = Leg_R_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Leg_R_Hider\"\n    buttonWindowHider()\n    \n    setHider = Leg_L_Hider\n    commandButton = \"setHider = Leg_L_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Leg_L_Hider\"\n    buttonWindowHider()\n    \n    setHider = Extra_One_Hider\n    commandButton = \"setHider = Extra_One_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Extra_One_Hider\"\n    buttonWindowHider()\n       \n    setHider = Extra_Two_Hider\n    commandButton = \"setHider = Extra_Two_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Extra_Two_Hider\"\n    buttonWindowHider()\n    \n    setHider = Extra_Three_Hider\n    commandButton = \"setHider = Extra_Three_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Extra_Three_Hider\"\n    buttonWindowHider()\n    \n    ## ### ### ### ### #### Column 2 #### ### ### ### ### ###\n    # Unlock Vis meshes \n    cmds.iconTextButton (i=\"Icons_Hider/Unlock_Hider.png\", c='cmds.warning(rightClickToSeeButtons_Ann),', ann=rightClickToSeeButtons_Ann)\n    cmds.popupMenu()\n    cmds.menuItem(i=\"Icons_Hider/Unlock_Hider.png\", l=\"Unlock All Visible\", c= \"unlockAllVisible()\", ann=unlockAllVis_Ann)\n    cmds.menuItem(i=\"Icons_Hider/Unlock_Hider.png\", l=\"Unlock All Visible Meshes\", c= \"unlockAllVismeshes()\", ann=unlockAllVisMeshes_Ann)\n    cmds.menuItem(i=\"Icons_Hider/Lock_Hider.png\", l=\"Lock Selection\", c= \"lockSelection()\", ann=lockSelection_Ann)\n\n    # Object mode Select\n    cmds.iconTextButton (i=\"Icons_Hider/ObjectMode_Hider.png\", c=\"objectModeHider()\", ann=objectMode_Ann)\n    # Toggle Ctrls and poly select\n    cmds.iconTextButton ('toggleFacesNurbsCurve', i=\"Icons_Hider/Only_Faces_Hider.png\", c=\"switchPolyOrNurbsSel()\",ann=switchPolyOrNurbsCurves_Ann)\n    cmds.popupMenu()\n    cmds.menuItem(i=\"Icons_Hider/PolyColorSel_Red_Hider.png\",l=\"Poly color selection Red\", c= \"cmds.displayColor ('polyFace', 13, active= True)\")\n    cmds.menuItem(i=\"Icons_Hider/PolyColorSel_Green_Hider.png\", l=\"Poly color selection Green\", c=\"cmds.displayColor ('polyFace', 14, active= True)\")\n    cmds.menuItem(i=\"Icons_Hider/PolyColorSel_Default_Hider.png\", l=\"Poly color selection default\", c=\"cmds.displayColor ('polyFace', 21, active= True)\")\n    # Grow selection\n    cmds.iconTextButton (i=\"Icons_Hider/Grow_Hider.png\", c=\"cmds.polySelectConstraint (pp=1)\", commandRepeatable=True, ann=grow_Ann)\n    # Shrink selection\n    cmds.iconTextButton (i=\"Icons_Hider/Shrink_Hider.png\", c=\"cmds.polySelectConstraint (pp=2)\", commandRepeatable=True, ann=shrink_Ann)\n    # Template Line Window\n    cmds.iconTextButton (i=\"Icons_Hider/Template_Line_Hider.png\", c=\"SelectTemplateLineWindow()\", ann=templateLine_Ann)\n    # Mirror \n    cmds.iconTextButton (i=\"Icons_Hider/Mirror_Hider.png\", c=\"mirrorHider()\", ann=mirrorButtons_Ann)\n    # Check all sets\n    cmds.iconTextButton (i=\"Icons_Hider/Show_All_Hidden_Faces_Hider.png\", c=\"checkAllSets()\", ann=checkAllSets_Ann)\n    cmds.popupMenu()\n    cmds.menuItem(l=\"Isolate mode\", c=\"checkAllSetsIsolate()\", ann= ( checkAllSets_Ann + ' but isolating every set') )\n    # Extra functions\n    cmds.iconTextButton (i=\"Icons_Hider/Extra_Functions_Hider.png\",  c='cmds.warning(rightClickToSeeButtons_Ann),', ann=rightClickToSeeButtons_Ann)\n    cmds.popupMenu('extraFunctions')\n    cmds.menuItem(l=\"Show all hidden faces in the scene\", c=\"showAllHiddenFaces()\")\n    # Remove All Hider\n    cmds.iconTextButton (i=\"Icons_Hider/Remove_All_Hider.png\", c=\"confirmRemoveAllHider()\",ann=deleteAll_Ann)\n\n    cmds.setParent('..')\n    # Show window\n    cmds.showWindow( windowHider )    \n    # # # Check Functions # # #\n    checkEditMode()\n    checkAllIconSets()\n    \n \nHiderUI()\n\n\n\n\n\n\n\n\n\n\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "import maya.cmds as cmds\nimport maya.mel as mel\nimport time\nimpo..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "hider" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import maya.cmds as cmds\nimport maya.mel as mel\nimport time\nimport subprocess\n\n'''\n# Version\nversionHider = 'FCM_Hider Beta 2.2'\n\n- support python 3\n- Fixing some miss-spells in message declaration\n- \n\n'''\n\n\n# Annotations for popUp help:\nallSets_Ann = 'Left Click:\\n -Switch between Show and Hide set\\n\\nRight click options:\\n- Remove all the Body sets\\n- Select all content of the set\\n- Remove all the Extra sets'\nblueButtons_Ann = 'Left Click:\\n -Switch between Show and Hide set\\n\\nRight click options:\\n- Add your current selection to the current set\\n- Remove your current selection from the current set\\n- Select all content of the set\\n- Remove all content from the current set'\ntemplateLine_Ann = 'This button allows you to select the usual line between the elbow control and the pole vector control that is mostly unselectable'\neditMode_Ann = 'Toggle between Usage and Edit mode'\naddSel_Ann = 'Add your current selection to the current set'\naddSelExtra_Ann = 'Add your current selection to the current set (Only shapes and polygons)'\ngrow_Ann = 'Grow selection'\nshrink_Ann = 'Shrink selection'\nswitchPolyOrNurbsCurves_Ann = 'Left Click:\\n-Switch between Poly selection and NurbsCurves\\nRight Click:\\n-Change poly color selection'\nobjectMode_Ann = 'Object Mode'\ndeleteAll_Ann = 'Delete everything related to the script'\nhelp_Ann = 'Open help window'\nshowAllHiddenFaces_Ann = 'Show all hidden faces in the scene'\ncheckAllSets_Ann = 'Turn OFF and ON two times each set to check the overall setup'\nmirrorButtons_Ann = 'Mirror right Arm and Leg content to the left ones'\nunlockAllVisMeshes_Ann = 'Make selectable all visible meshes and unlock all layer display on the scene'\nunlockAllVis_Ann = 'Make selectable all: mesh shape, nurbsCurve shape, transform, annotation shape of the scene'\nlockSelection_Ann = 'Make all the items selected unselectables'\nrightClickToSeeButtons_Ann = 'Right click to see the buttons'\n# Prints\nsetsExportSucces = 'Sets exported succesfully!'\nsetsLoadSucces = 'Sets loaded succesfully!'\nsetHided = 'Set hidden'\nsetVisible = 'Set Visible'\nallVisMeshSelectable = 'All visible meshes are selectable, and all layerDisplay are unlocked'\nallBodySetsRemoved = 'All Body sets removed' \nallExtraSetsRemoved = 'All Extra sets removed'\nkeepYourSecrets = 'Alright then, keep your secrets' \nallRemoved = 'everything related to FCM_Hider Removed'\nselRemoved = 'Selection removed'\n# Warnings\nallFacesAreVisible = 'All faces are visible'\nsetDoesntExistsSet = 'Set doesn\\'t exists'\nhiderSystemWarning = 'There is more than one Hider system, select the character you want to run'\nconfirmCheckAllSets = 'This may take a while, do you want to check them?'\nnothingSel = 'Nothing selected' \nsetDontExists = 'Set doesn\\'t exist'\ncouldntUnlockAllMeshes = \"Couldn't unlock all the meshes because they are in a layerDisplay, check if you can unlock them trough layer display\"\ncouldntUnlockAllLayerDisplay = \"Couldn't unlock all layerDisplay\"\nnothingSelected = 'Nothing selected'\n# Error\nerrorLoadSets = 'Error trying to load the set, Try to set the namespace the same than when you export the file' \nerrorExportSets = 'You can only save sets created in the scene'\n\n# PromptWindows\nremoveAllConfirm = 'Are you sure you want to delete everything related to the script?'\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                CREATE SETTINGS AND SETS\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef declaringSets():\n    global namespaceHider, All_Sets_Hider, Head_Hider, Torso_Hider, Arm_R_Hider, Arm_L_Hider, Leg_R_Hider, Leg_L_Hider, Extra_One_Hider, Extra_Two_Hider, Extra_Three_Hider, FCM_Hider_Settings\n    All_Sets_Hider = ( namespaceHider + 'All_Sets_Hider' )\n    Head_Hider = ( namespaceHider + 'Head_Hider' )\n    Torso_Hider = ( namespaceHider + 'Torso_Hider' )\n    Arm_R_Hider = ( namespaceHider + 'Arm_R_Hider' )\n    Arm_L_Hider = ( namespaceHider + 'Arm_L_Hider' )\n    Leg_R_Hider = ( namespaceHider + 'Leg_R_Hider' )\n    Leg_L_Hider = ( namespaceHider + 'Leg_L_Hider' )\n    Extra_One_Hider = ( namespaceHider + 'Extra_One_Hider' )\n    Extra_Two_Hider = ( namespaceHider + 'Extra_Two_Hider' )\n    Extra_Three_Hider = ( namespaceHider + 'Extra_Three_Hider' )\n    FCM_Hider_Settings = ( namespaceHider + 'FCM_Hider_Settings' )\n#-----------------------------------------------------------#\ndef createAllSets():\n    global namespaceHider, All_Sets_Hider, Head_Hider, Torso_Hider, Arm_R_Hider, Arm_L_Hider, Leg_R_Hider, Leg_L_Hider, Extra_One_Hider, Extra_Two_Hider, Extra_Three_Hider, FCM_Hider_Settings\n    if cmds.objExists('All_Sets_Hider') == 0:cmds.sets(n='All_Sets_Hider', em=True)\n    if cmds.objExists(Head_Hider) == 0:cmds.sets(n=Head_Hider, em=True)\n    if cmds.objExists(Torso_Hider) == 0:cmds.sets(n=Torso_Hider, em=True)\n    if cmds.objExists(Arm_R_Hider) == 0:cmds.sets(n=Arm_R_Hider, em=True)\n    if cmds.objExists(Arm_L_Hider) == 0:cmds.sets(n=Arm_L_Hider, em=True)\n    if cmds.objExists(Leg_R_Hider) == 0:cmds.sets(n=Leg_R_Hider, em=True)\n    if cmds.objExists(Leg_L_Hider) == 0:cmds.sets(n=Leg_L_Hider, em=True)\n    if cmds.objExists(Extra_One_Hider) == 0:cmds.sets(n=Extra_One_Hider, em=True)\n    if cmds.objExists(Extra_Two_Hider) == 0:cmds.sets(n=Extra_Two_Hider, em=True)\n    if cmds.objExists(Extra_Three_Hider) == 0:cmds.sets(n=Extra_Three_Hider, em=True)\n    # parent all sets to All_Sets_Hider\n    cmds.sets (Head_Hider, Torso_Hider, Arm_R_Hider, Arm_L_Hider, Leg_R_Hider, Leg_L_Hider,\n    Extra_One_Hider, Extra_Two_Hider, Extra_Three_Hider, edit=True, fe='All_Sets_Hider' )\n#-----------------------------------------------------------#\ndef createSettingsHider():\n    if cmds.objExists ('FCM_Hider_Settings') == 0:\n        selCurrent = cmds.ls (sl=True)\n        cmds.group (em=True, n= 'FCM_Hider_Settings')\n        cmds.setAttr (\".tx\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".ty\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".tz\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".rx\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".ry\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".rz\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".sx\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".sy\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".sz\", lock=True, keyable=False, channelBox=False )\n        cmds.setAttr (\".v\", lock=True, keyable=False, channelBox=False )\n        # Create Attr States\n        cmds.addAttr ('FCM_Hider_Settings', ln='All_Sets_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Head_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Torso_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Arm_R_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Arm_L_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Leg_L_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Leg_R_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Extra_One_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Extra_Two_Hider_State',at='bool', dv=True, keyable=True)\n        cmds.addAttr ('FCM_Hider_Settings', ln='Extra_Three_Hider_State',at='bool', dv=True, keyable=True)\n        # Create Attr Edit Mode\n        cmds.addAttr ('FCM_Hider_Settings', ln='Edit_Mode_State',at='bool', dv=True, keyable=True)\n\n        # Select current\n        cmds.select(selCurrent)\n#-----------------------------------------------------------#   \ndef createHiderInTheScene():\n    global namespaceHider, namespaceHiderForWindow\n    # nameSpace empty\n    namespaceHider = ''    \n    namespaceHiderForWindow = 'Created in the scene'\n    # declaring sets\n    declaringSets()\n    # Create settings and all sets\n    createSettingsHider()\n    createAllSets()\n    \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    DECLARING NAMESPACES \n            \n''''''''''''''''''''''''''''''''''''''''''''''''''''''''' \n\ndef declaringNameSpaces():\n    global namespaceHider, namespaceHiderForWindow\n    # Check if Hider system exists and if there is more than one\n    currentSel = cmds.ls(sl=True)\n    if cmds.objExists('*:FCM_Hider_Settings'):\n        cmds.select('*:FCM_Hider_Settings')\n        try:\n            cmds.select('FCM_Hider_Settings',tgl=True)\n        except:\n            pass    \n        settings = cmds.ls(sl=True)\n        \n        # if there is more than one\n        if len(settings) >= 1:\n            try:\n                # works depending selection\n                try:\n                    # if the selection is referenced\n                    # Query nameSpace\n                    namespaceHiderForWindow = cmds.referenceQuery( currentSel[0], namespace=True, shortName=True )\n                    namespaceHider = namespaceHiderForWindow + \":\" \n                    declaringSets()\n                except:\n                    createHiderInTheScene()\n            except:\n                cmds.warning(hiderSystemWarning)\n    else:\n        createHiderInTheScene()\n        \n    cmds.select(currentSel)\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                PRIMARY FUNCTIONS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n#-----------------------------------------------------------#    \ndef queryAllSet():\n    global allSet, polys, shapes, transformAndShapeSet\n\n    # Query all set\n    allSet = cmds.sets(setHider, q=True, )\n    # Query transform\n    transformAndShapeSet = cmds.ls(allSet, type= [ 'transform','shape']  )\n    # Query polys\n    polys = cmds.filterExpand(allSet, sm=34)\n    # Query meshShapes from polys\n    try:\n        shapes = []\n        for poly in polys:\n            shape = cmds.listRelatives(poly, s=True, p=True, fullPath=True)\n            shapes.append(shape)\n        shapes \n        def getUniqueItems(iterable):\n            result = []\n            for item in iterable:\n                if item not in result:\n                    result.append(item)\n            return result\n            \n            print (''.join(getUniqueItems(list('apple'))))\n        shapes = getUniqueItems(shapes)\n    except:\n        pass\n\n\n#-----------------------------------------------------------#\ndef addSelectionToSet():\n    global setHider\n    try:\n        sel = cmds.ls(sl=True, l=True)\n        if len(sel) > 0:\n            if cmds.objExists(setHider):\n                # Add selection to set\n                # If the setHider is Extra will query shape, if is Normal will query transform\n                removeNameSpace()\n\n                if shapeMode == 'On':\n                    addNameSpace()\n                    shapesCtrl = cmds.listRelatives(sel, s=True, fullPath=True)\n                    polys = cmds.filterExpand(sel, sm=34, fullPath=True)\n                    cmds.sets (shapesCtrl, edit=True, forceElement=setHider)\n                    cmds.sets (polys, edit=True, forceElement=setHider)\n                if shapeMode == 'Off':\n                    addNameSpace()\n                    cmds.sets (sel, edit=True, forceElement=setHider)\n                # Query all\n                queryAllSet()\n                # Hide set\n                hideSet()\n                # Turn on display invisible faces for shapes\n                for shape in shapes:\n                    cmds.polyOptions (shape, displayInvisibleFaces=1)\n                # Deselect\n                cmds.select(cl=True)\n        else:\n            cmds.warning(nothingSelected)\n    except:\n        createSettingsHider()\n#-----------------------------------------------------------#\ndef hidePolys():\n    global setHider, lastPolys, lastPoly\n    queryAllSet()\n    try:\n        cmds.hide(polys)\n    except:\n        # get the last polygon for every shape in set\n        lastPolys = []\n        # query lastPoly for every shape\n        for shape in shapes:\n            desgote = cmds.filterExpand(shape[0] +'.f[*]', sm=34, fullPath=True)\n            cmds.select(desgote[-1])\n            sel = cmds.ls(sl=True)\n            lastPolys.append(sel)\n        # remove last poly for every shape\n        for lastPoly in lastPolys:\n            # Show lastPoly\n            cmds.showHidden(lastPoly)\n            for poly in polys:\n                if poly == lastPoly[0]:\n                    polys.remove(poly)        \n        # Hide all polys except the last one for each shapemesh            \n        cmds.hide(polys)\n        # Hide last poly for each shapeMesh, and select each shape just for avoid bug\n        for lastPoly in lastPolys:\n            cmds.polyHole(lastPoly[0], assignHole = 1)\n        for shape in shapes:\n            cmds.select(shape)\n###############\ndef showPolys():\n    global setHider\n    try:\n        removeNameSpace()\n        if cmds.getAttr(FCM_Hider_Settings + '.' + setHider + '_State') == 0:\n            addNameSpace() \n            # show all polys in set\n            try:\n                cmds.showHidden(polys)\n                \n                # query lastPoly for every shape\n                lastPolys = []\n                queryAllSet()\n                for shape in shapes:\n                    desgote = cmds.filterExpand(shape[0] +'.f[*]', sm=34, fullPath=True)\n                    cmds.select(desgote[-1])\n                    sel = cmds.ls(sl=True)\n                    lastPolys.append(sel)\n                # remove last poly for every shape\n                for lastPoly in lastPolys:\n                    for poly in polys:\n                        if poly == lastPoly[0]:\n                            polys.remove(poly)\n                # Show last poly for each shapeMesh, and select each shape just for avoid bug\n                for lastPoly in lastPolys:\n                    cmds.polyHole(lastPoly[0], assignHole = 0)\n                \n            except:\n                pass\n    except:\n        pass\n#-----------------------------------------------------------#\ndef hideSet():\n    global setHider, namespaceHider\n    if cmds.objExists(setHider):\n        try:\n            ############\n            value = 0  #\n            ############\n            currentSel = cmds.ls (sl=True)\n            # Query all\n            queryAllSet()\n            ## set visibility for transform OFF\n            # Check if is Extra or Normal, for Extras it will hide only shapes\n\n            for item in transformAndShapeSet:\n                try:\n                    cmds.setAttr(item + '.visibility', value)\n                except:\n                    cmds.setAttr(item + '.lodVisibility', value)\n            # Set visibility for polys OFF\n            hidePolys()\n            # select current sel\n            cmds.select (currentSel)\n            # print\n            print (setHided),\n        except:\n            createSettingsHider()\n    else:\n        cmds.warning(\"set doesn't exists\")\n    \n    ######################\n    # Remove namespace for this operation\n    removeNameSpace()\n    # Set Attr State to Off    \n    cmds.setAttr( FCM_Hider_Settings + '.' + (setHider + '_State'), 0)\n    # Turn off Icon\n    checkStateIcon()\n#-----------------------------------------------------------#\ndef showSet():\n    global setHider, namespaceHider\n    if cmds.objExists(setHider):\n        ############\n        value = 1  #\n        ############\n        currentSel = cmds.ls (sl=True)\n        # Query all\n        queryAllSet()\n        ## set visibility for transform ON\n        for item in transformAndShapeSet:\n            try:\n                cmds.setAttr(item + '.visibility', value)\n            except:\n                cmds.setAttr(item + '.lodVisibility', value)\n        # Set visibility for polys ON\n        showPolys()\n        # select current sel\n        cmds.select (currentSel)\n        # print\n        print (setVisible),\n    else:\n        cmds.warning(setDoesntExists)\n    #----------------------------#\n    # Remove namespace for this operation\n    removeNameSpace()\n    # Set Attr State to On\n    cmds.setAttr( FCM_Hider_Settings + '.' + (setHider + '_State'), 1)\n    # Turn off Icon\n    checkStateIcon()\n#-----------------------------------------------------------#\ndef showOrHideButton():\n    global setHider\n    \n    # Check settings\n    try:\n        contentSet = cmds.sets(setHider, q=True)\n        # check if it's empty\n        if str(contentSet) == 'None':\n            cmds.warning('Set empty')\n        else:\n            removeNameSpace()\n            if cmds.getAttr( FCM_Hider_Settings + '.' + (setHider + '_State') ):\n                addNameSpace()\n                hideSet()\n            else:\n                addNameSpace()\n                showSet()\n    except:\n        createSettingsHider()\n        checkAllIconSets()\n#-----------------------------------------------------------#\ndef ShowOrHideAllSetsButton():   \n    global choise    \n    if cmds.getAttr(FCM_Hider_Settings + '.All_Sets_Hider_State'):\n        choise = 'hide'; ShowOrHideAllSets()\n    else:\n        choise = 'show'; ShowOrHideAllSets()\n#-----------------------------------------------------------#\ndef checkStateIcon():\n    global setHider, namespaceHider\n    try:\n        '''\n        # # # check if All_Sets_Hider is empty # # #\n        allSets = cmds.sets(All_Sets_Hider, q=True)\n        result = []\n        for set in allSets:\n            contentSet = cmds.sets(set, q=True)\n            result.append(contentSet)\n            if result == [None, None, None, None, None, None, None, None, None]:\n                # Set icon Empty\n                cmds.iconTextButton ( (All_Sets_Hider + \"button\"), e=True, image=(\"Icons_Hider/\" + 'All_Sets_Hider' + \"_Empty\" + \".png\") )\n            else:\n                # All sets hider is not empty\n                # Check settings\n                if cmds.getAttr( (FCM_Hider_Settings + '.All_Sets_Hider_State') ):\n                    # Icon On\n                    cmds.iconTextButton ( (All_Sets_Hider + \"button\"), e=True, image=(\"Icons_Hider/\" + All_Sets_Hider + \".png\") )\n                else:\n                    # Icon Off\n                    cmds.iconTextButton ( (All_Sets_Hider + \"button\"), e=True, image=(\"Icons_Hider/\" + All_Sets_Hider + \"_Off\" + \".png\") )\n        '''\n        #------------------------------------------#\n        # # # Check body and extra icon # # # \n        # query set\n        addNameSpace()\n        contentSet = cmds.sets(setHider, q=True)\n        # check if it's empty\n        if str(contentSet) == 'None':\n            removeNameSpace()\n            cmds.iconTextButton ( (setHider + \"button\"), e=True, image=(\"Icons_Hider/\" + setHider + \"_Empty\" + \".png\") )\n        else:\n            removeNameSpace()\n            # Check settings\n            if cmds.getAttr( FCM_Hider_Settings + '.' + (setHider + '_State') ):\n                # Icon On\n                cmds.iconTextButton ( (setHider + \"button\"), e=True, image=(\"Icons_Hider/\" + setHider + \".png\") )\n            else:\n                # Icon Off\n                cmds.iconTextButton ( (setHider + \"button\"), e=True, image=(\"Icons_Hider/\" + setHider + \"_Off\" + \".png\") )\n    except:\n        pass\n#-----------------------------------------------------------#\ndef checkAllIconSets():\n    global setHider\n    setHider = Head_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Torso_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Arm_R_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Arm_L_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Leg_R_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Leg_L_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Extra_One_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Extra_Two_Hider; removeNameSpace(); checkStateIcon()\n    setHider = Extra_Three_Hider; removeNameSpace(); checkStateIcon()\n\n#-----------------------------------------------------------#\ndef ShowOrHideAllSets():\n    global setHider\n    sets_In_AllSetsHider = cmds.sets(All_Sets_Hider,q=True)\n    # check if is empty\n    result = []    \n    for set in sets_In_AllSetsHider:\n        contentSet = cmds.sets(set, q=True)\n        result.append(contentSet)\n    if result == [None, None, None, None, None, None, None, None, None]:\n        cmds.warning('Set empty')\n        # if set is not empty\n    else:\n        for set in sets_In_AllSetsHider:\n            setHider = set\n            # Hide or Show all sets depending of choise before calling function\n            if choise == 'show':\n                showSet()\n                cmds.setAttr( FCM_Hider_Settings + '.All_Sets_Hider_State', 1)\n            if choise == 'hide':\n                hideSet()\n                cmds.setAttr( FCM_Hider_Settings + '.All_Sets_Hider_State', 0)\n        # Turn on Icon\n        checkStateIcon()\n\n#-----------------------------------------------------------#\ndef selectSet():\n    if cmds.objExists(setHider):\n        cmds.select(setHider)\n    else:\n        cmds.warning(\"set doesn't exists\")\n#-----------------------------------------------------------#\ndef showAllHiddenFaces():\n    if cmds.objExists('defaultHideFaceDataSet'):\n        cmds.showHidden('defaultHideFaceDataSet')\n        print(allFacesAreVisible),\n    else:\n        cmds.warning('No faces hidded')\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    LOCK FUNCTIONS\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef unlockAllVismeshes():\n    # Query \n    shapesAndShapesOrig = cmds.ls (v=True, type='mesh')\n    meshes = cmds.filterExpand(shapesAndShapesOrig, sm= 12 )\n    groups = cmds.ls(type='transform')\n    groupsAndMeshes = groups + meshes\n    try:\n        # For meshes\n        for item in groupsAndMeshes:\n            if cmds.getAttr (item + '.overrideDisplayType') == 2:\n                cmds.setAttr (item + '.overrideDisplayType', 0)\n    except:\n        pass\n    try:\n        # For displayLayers\n        displayLayers = cmds.ls(type='displayLayer', l=True) \n        for ld in displayLayers:\n            cmds.setAttr(ld + '.displayType', 0)     \n    except:\n        pass\n    print (allVisMeshSelectable),\n#-----------------------------------------------------------#\ndef unlockAllVisible():\n    # Query current Sel\n    currentSel = cmds.ls(sl=True)\n    # Querys\n    transform = cmds.ls(type='transform', v=True)\n    mesh = cmds.ls(type='mesh', v=True)\n    annotationShapes = cmds.ls(type='annotationShape')\n    visNurbsShapes = cmds.ls(type='nurbsCurve', v=True)\n    visNurbsTransform = cmds.ls(cmds.pickWalk (visNurbsShapes, d='up') )\n    \n    # Add all to nodes\n    nodes = annotationShapes + visNurbsTransform + visNurbsShapes + transform + mesh\n    \n    for item in nodes:\n        try:\n            cmds.setAttr(item + '.overrideDisplayType', 0)\n            cmds.setAttr(item + '.template', 0)\n        except:\n            pass\n    #-------------------#\n    try:\n        # For displayLayers\n        displayLayers = cmds.ls(type='displayLayer', l=True)\n        # For displayLayers\n        displayLayers = cmds.ls(type='displayLayer', l=True) \n        for ld in displayLayers:\n            cmds.setAttr(ld + '.displayType', 0)     \n    except:\n        pass\n    cmds.select(currentSel)\n    print ('All selectable'),\n#-----------------------------------------------------------#\ndef lockSelection():  \n    # Query \n    sel = cmds.ls(sl=True)\n    if len(sel) > 0:\n        selShape = cmds.ls(cmds.pickWalk (sel, d='down') )\n        # Add all to nodes\n        nodes = sel + selShape \n        \n        for item in nodes:\n            try:\n                cmds.setAttr(item + '.overrideDisplayType', 1)\n            except:\n                pass\n        \n        print ('Selection Locked'),\n    else:\n        cmds.warning(nothingSelected)\n\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    REMOVE FUNCTIONS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef removeAllBodySets():\n    global setHider\n    currentSel = cmds.ls(sl=True)\n    if cmds.objExists(Head_Hider):setHider = Head_Hider;removeSet()\n    if cmds.objExists(Torso_Hider):setHider = Torso_Hider;removeSet()\n    if cmds.objExists(Arm_R_Hider):setHider = Arm_R_Hider;removeSet()\n    if cmds.objExists(Arm_L_Hider):setHider = Arm_L_Hider;removeSet()\n    if cmds.objExists(Leg_R_Hider):setHider = Leg_R_Hider;removeSet()\n    if cmds.objExists(Leg_L_Hider):setHider = Leg_L_Hider;removeSet()\n    cmds.select(currentSel)\n    print(allBodySetsRemoved), \n#-----------------------------------------------------------#\ndef removeAllExtraSets():\n    global setHider\n    currentSel = cmds.ls(sl=True)\n    if cmds.objExists(Extra_One_Hider):setHider = Extra_One_Hider;removeSet()\n    if cmds.objExists(Extra_Two_Hider):setHider = Extra_Two_Hider;removeSet()\n    if cmds.objExists(Extra_Three_Hider):setHider = Extra_Three_Hider;removeSet()\n    cmds.select(currentSel)\n    print(allExtraSetsRemoved), \n#-----------------------------------------------------------#\ndef removeAllHider():\n    removeAllBodySets()\n    removeAllExtraSets()\n    if cmds.objExists(FCM_Hider_Settings):cmds.delete(FCM_Hider_Settings)\n    if cmds.objExists('All_Sets_Hider'):cmds.delete('All_Sets_Hider')\n    if cmds.window (\"windowHider\", exists=True):\n        cmds.deleteUI (\"windowHider\")\n    print(allRemoved), \n################\ndef confirmRemoveAllHider():\n    response = cmds.confirmDialog(\n                    title='Confirm Window',\n                    message=removeAllConfirm, \n                    button=['Yes', 'No'],\n                    defaultButton='Yes',\n                    cancelButton='Cancel',\n                    dismissString='Cancel')\n    if response == 'Yes':\n        removeAllHider()\n    if response == 'No':    \n        print(keepYourSecrets), \n#-----------------------------------------------------------#\ndef removeSet():\n    global setHider\n    # Show set\n    showSet()\n    # Query all set\n    allSet = cmds.sets(setHider, q=True)\n    # Remove all from set\n    cmds.sets(allSet, edit=True, rm=setHider)\n    checkStateIcon()\n#-----------------------------------------------------------#\ndef removeSelection():\n    global setHider\n    # Query sel\n    sel = cmds.ls(sl=True)\n    if len(sel) > 0:\n        if cmds.objExists(setHider):\n            value = 1\n\n            # Query Transform\n            transformSel = cmds.ls(sl=True, type='transform')\n            # Query Polys\n            polysSel = cmds.filterExpand(sel, sm=34, fullPath=True)\n            # Query Shape\n            shapesSel = cmds.listRelatives(sel, s=True)\n            # Remove shapes from set\n            cmds.sets (shapesSel, edit=True, rm=setHider)\n            # Remove sel from Set\n            cmds.sets (sel, edit=True, rm=setHider)\n\n            try:\n                # Set shape visibility ON\n                for item in shapesSel:\n                    try:\n                        cmds.setAttr(item + '.visibility', value)\n                    except:\n                        cmds.setAttr(item + '.lodVisibility', value)\n            \n            except:\n                pass\n            \n            # Set transfom visibility ON\n            for item in transformSel:\n                try:\n                    cmds.setAttr(item + '.visibility', value)\n                except:\n                    cmds.setAttr(item + '.lodVisibility', value)\n            if value == 1:\n                value = 0\n            # Set polys visibility ON Method 1\n            cmds.showHidden(polysSel)\n            # Set polys visibility ON Method 2\n            try:\n                for poly in polysSel:\n                    cmds.polyHole (poly, assignHole = value)\n            except:\n                pass\n            checkStateIcon()\n            print(selRemoved), \n        else:\n            cmds.warning(setDontExists) \n    else:\n        cmds.warning(nothingSel)\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    NAMESPACES DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef queryNamespace():\n    # Query nameSpace\n    namespaceHider = cmds.referenceQuery( '*:FCM_Hider_Settings', namespace=True, shortName=True )\n    # add \":\"\n    namespaceHider = namespaceHider + \":\"\n\n#-----------------------------------------------------------#    \ndef removeNameSpace():\n    global setHider, namespaceHider\n    if len(namespaceHider) > 0:\n        numberNS = len(namespaceHider)\n        setHider = setHider[numberNS:]\n\n#-----------------------------------------------------------#    \ndef addNameSpace():\n    global setHider, namespaceHider\n    if len(namespaceHider) > 0:\n        setHider = namespaceHider+setHider\n        \n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                SAVE AND LOAD SETS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef saveSetsHider():\n    if namespaceHiderForWindow == 'Created in the scene':\n        # just in case\n        createAllSets()\n        # Declare sets\n        allSets = [Head_Hider,Torso_Hider,Arm_R_Hider,Arm_L_Hider,\n        Leg_R_Hider,Leg_L_Hider, Extra_One_Hider,Extra_Two_Hider,Extra_Three_Hider]    \n        # Open save file window\n        SourceFile = cmds.fileDialog2(startingDirectory =\"/usr/u/bozo/myFiles/\", fileFilter=\"Python File(*.py)\")\n        SourceFile = ''.join([str(elem) for elem in SourceFile]) \n        # Open file (overwrite mode)\n        fileHandle = open(  (SourceFile ), 'w' )\n        # write remove existent set\n        fileHandle.write(\"## Remove existent sets\\n\" + \"removeAllBodySets()\\n\" + \"removeAllExtraSets()\\n\")\n        # Write create All_Sets_Hider set\n        fileHandle.write( \"## Create all sets\\n\"+ \"createAllSets()\\n\" + \"## Select each set content and create set\\n\")\n        for set in allSets:       \n            # Query content\n            setContent = cmds.sets(set, q=True )\n            if str(setContent) == 'None':\n                pass\n            else:\n                # write open selection\n                fileHandle.write('cmds.select(')\n                # write every item in the selection\n                for item in setContent:\n                    fileHandle.write('\"'+ item+'\",')\n                # write: close selection and add new line\n                fileHandle.write(')'+'\\n')\n                # write: create set with selection\n                fileHandle.write( 'cmds.sets( edit=True, fe=' + set + ')\\n')\n        # write create settings and run UI\n        fileHandle.write(\"## Select clear\\n\" + \"cmds.select(cl=True)\\n\")\n        # write HiderUI\n        fileHandle.write(\"## Check all icons\\n\" + \"checkAllIconSets()\")\n        # close file\n        fileHandle.close()\n        # Print\n        print(setsExportSucces), \n    else:\n        cmds.confirmDialog( title='FCM Hider Warning', message=errorExportSets, button='Ok')\n\ndef LoadSetsHider():\n    try:\n        # Open file\n        SourceFile = cmds.fileDialog(m=0)\n        # Read file\n        with open(SourceFile, 'r') as filehandle:\n            filecontent = filehandle.read()\n        # Execute file\n        exec(filecontent)\n        print(setsLoadSucces), \n    except:\n        cmds.error(errorLoadSets)\n     \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    WINDOW FUNCTIONS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef inViewMessageHider():\n    # For using inViewMessage using the messageHider variable\n    global messageHider\n    cmds.inViewMessage (amg=\"<span style=\\\"color:#82C99A;\\\"> \"+messageHider+\" </span> \", \n    dragKill=True, pos='topCenter',fade=True)\n#-----------------------------------------------------------#  \ndef toggleEditMode():\n    if cmds.window ('windowHider',q=True, h=True) == (36 + highWindow) :\n        # Edit mode ON\n        # change icon\n        cmds.iconTextButton ('Edit_Modebutton', e=True,\n        image1=\"Icons_Hider/Contract_Hider.png\")\n        # change window size\n        cmds.window ('windowHider', edit=True, w=widthWindow, h=(74 + highWindow))\n        # set settings\n        cmds.setAttr (FCM_Hider_Settings +'.Edit_Mode_State', 1)\n    else:\n        # Edit mode OFF\n        # change icon\n        cmds.iconTextButton ('Edit_Modebutton', e=True,\n        image1=\"Icons_Hider/Expand_Hider.png\")\n        # change window size\n        cmds.window ('windowHider', edit=True, w=widthWindow, h=(36 + highWindow))\n        # set settings\n        cmds.setAttr (FCM_Hider_Settings+'.Edit_Mode_State', 0)\n###############\ndef checkEditMode():\n    if cmds.getAttr( FCM_Hider_Settings + '.Edit_Mode_State' ):\n        # Edit mode ON\n        # change icon\n        cmds.iconTextButton ('Edit_Modebutton', e=True,\n        image1=\"Icons_Hider/Contract_Hider.png\")\n    \n        # change window size\n        cmds.window ('windowHider', edit=True, w=widthWindow, h= (74 + highWindow) )\n    else:\n        # Edit mode ON\n        # change icon\n        cmds.iconTextButton ('Edit_Modebutton', e=True,\n        image1=\"Icons_Hider/Expand_Hider.png\")\n        # change window size\n        cmds.window ('windowHider', edit=True, w=widthWindow, h= (36 + highWindow))\n#-----------------------------------------------------------#\ndef objectModeHider():\n    global messageHider\n    # Object mode\n    cmds.selectMode(object=True)\n    # selectType all active\n    mel.eval('selectMode -object; selectType -handle 1 -ikHandle 1 -joint 1 -nurbsCurve 1 -cos 1 -stroke 1 -nurbsSurface 1 -polymesh 1 -subdiv 1 -plane 1 -lattice 1 -cluster 1 -sculpt 1 -nonlinear 1 -particleShape 1 -emitter 1 -field 1 -spring 1 -rigidBody 1 -fluid 1 -hairSystem 1 -follicle 1 -nCloth 1 -nRigid 1 -dynamicConstraint 1 -rigidConstraint 1 -collisionModel 1 -light 1 -camera 1 -texture 1 -ikEndEffector 1 -locator 1 -dimension 1;selectType -byName gpuCache 1;')\n    mel.eval('selectMode -component; selectType -cv 1 -vertex 1 -subdivMeshPoint 1 -latticePoint 1 -particle 1 -editPoint 0 -curveParameterPoint 0 -surfaceParameterPoint 0 -puv 0 -polymeshEdge 0 -subdivMeshEdge 0 -isoparm 0 -surfaceEdge 0 -surfaceFace 1 -springComponent 0 -facet 0 -subdivMeshFace 1 -hull 0 -rotatePivot 0 -scalePivot 0 -jointPivot 0 -selectHandle 0 -localRotationAxis 0 -imagePlane 0;')\n    mel.eval('changeSelectMode -object')#-----------------------------------------------------------#\n    # inView Message\n    messageHider = 'Object Mode'; inViewMessageHider()\n\ndef switchPolyOrNurbsSel():\n    global messageHider\n    if cmds.iconTextButton('toggleFacesNurbsCurve', q=True, i=True) == \"Icons_Hider/Only_Faces_Hider.png\":\n        # # Select only nurbsCurve # #\n        # object mode\n        objectModeHider()\n        # turn on curves CVs selection\n        cmds.selectType (cv=True)\n        # only curves\n        mel.eval('setObjectPickMask \"All\" 0;setObjectPickMask \"Curve\" true')\n        # inview message\n        messageHider = 'NurbsCurve selection Mode'; inViewMessageHider()\n        # change icon\n        cmds.iconTextButton ('toggleFacesNurbsCurve', e=True, i=\"Icons_Hider/Only_NurbsCurve_Hider.png\")\n    else:\n        # # Select only faces # #\n        mel.eval('changeSelectMode -component')\n        mel.eval('setComponentPickMask \"Facet\" true; ')\n        # turn off CVs point selection\n        cmds.selectType (cv=False)\n\n        # inview message\n        messageHider = 'Poly Faces selection Mode'; inViewMessageHider()\n        # change icon\n        cmds.iconTextButton ('toggleFacesNurbsCurve', e=True, i=\"Icons_Hider/Only_Faces_Hider.png\")\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                SELECT TEMPLATE LINE DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef growSelection():\n    cmds.select(cmds.listConnections (t='transform'))\ndef filterOnlyCurves():\n    sel = cmds.ls(sl=True)\n    onlyCurves = cmds.filterExpand(sel, sm=9, fullPath=True)\n    cmds.select(onlyCurves)\n    print( 'You have selected: ' + str(onlyCurves)),\ndef printSelected():\n    sel = cmds.ls(sl=True)\n    print( str(len(sel)) ),\n\ndef SelectTemplateLineWindow():\n    if cmds.window (\"Select_Template_Line\", exists=True ):\n        cmds.deleteUI (\"Select_Template_Line\")\n    selectTemplateLine = cmds.window (\"Select_Template_Line\", title=\"Select Template Line\", s=False)\n    cmds.columnLayout(adjustableColumn=True)\n    cmds.text(l='Usage: First select pole vector Ctrl\\nThen grow selection, Filter and add it to a Set', h=30, fn='boldLabelFont')\n    cmds.separator()\n    cmds.button(l='1- Grow selection', c='growSelection()')\n    cmds.separator()\n    cmds.button(l='2- Filter Only Curves', c='filterOnlyCurves()')\n    cmds.separator()\n    cmds.button(l='3- Print number selected', c='printSelected()')\n    cmds.showWindow( selectTemplateLine )\n    cmds.window ('Select_Template_Line', edit=True, w=300, h=110)\n    print('Select Template Line Window'),\ndef mirrorCtrlsHider():\n    global setHiderParent, setHiderChild\n    L_Content = []; finalContentL = []; L_item = []\n    for item in setHiderParent:\n        L_item = item.replace(R_Variable, L_Variable)\n        # check if L_item is diferent than R_item\n        if L_item != item:\n            L_Content.append(L_item)\n            for itemL in L_Content:\n                try:\n                    cmds.select(itemL)\n                    finalContentL.append(itemL)\n                    cmds.select(finalContentL)\n                    sel = cmds.ls(sl=True)\n                    cmds.sets(sel, fe=setHiderChild)\n                    cmds.select(cl=True)            \n                except:\n                        pass\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    MIRROR DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef mirrorCtrlsHider():\n    global setHiderParent, setHiderChild\n    L_Content = []; finalContentL = []; L_item = []\n    for item in setHiderParent:\n        L_item = item.replace(R_Variable, L_Variable)\n        # check if L_item is diferent than R_item\n        if L_item != item:\n            L_Content.append(L_item)\n            for itemL in L_Content:\n                try:\n                    cmds.select(itemL)\n                    finalContentL.append(itemL)\n                    cmds.select(finalContentL)\n                    sel = cmds.ls(sl=True)\n                    cmds.sets(sel, fe=setHiderChild)\n                    cmds.select(cl=True)            \n                except:\n                        pass\n\n#------------------------------#             \ndef tryNomenclaturesMirror():\n    global R_Variable, L_Variable\n    R_Variable = \"R_\"; L_Variable = \"L_\"; mirrorCtrlsHider()\n    R_Variable = \"_R\"; L_Variable = \"_L\"; mirrorCtrlsHider()\n    R_Variable = \"_R_\"; L_Variable = \"_L_\"; mirrorCtrlsHider()\n    R_Variable = \"r_\"; L_Variable = \"r_\"; mirrorCtrlsHider()\n    R_Variable = \"_r\"; L_Variable = \"_l\"; mirrorCtrlsHider()\n    R_Variable = \"_r_\"; L_Variable = \"_l_\"; mirrorCtrlsHider()\n    R_Variable = \"Right\"; L_Variable = \"Left\"; mirrorCtrlsHider()\n    R_Variable = \"right\"; L_Variable = \"left\"; mirrorCtrlsHider()\n    R_Variable = \"rt\"; L_Variable = \"lf\"; mirrorCtrlsHider()\n    R_Variable = \"Rt\"; L_Variable = \"Lf\"; mirrorCtrlsHider()\n    R_Variable = \"RGT\"; L_Variable = \"LFT\"; mirrorCtrlsHider()\n    R_Variable = \"Rgt\"; L_Variable = \"Lft\"; mirrorCtrlsHider()\n#------------------------------#             \ndef mirrorPolyHider():\n    cmds.select(setHiderParent)\n    mel.eval('reflectionSetMode objectx')\n    mel.eval('reflectionSetMode none')\n    cmds.select(setHiderParent, tgl=True)\n    # Add selection to child set\n    cmds.sets(fe=setHiderChild)\n    # Select clear\n    cmds.select(cl=True)\n#------------------------------#\n# Aca tendria que usar la funcion que me quedo en temp 3 para seleccionar objetos sueltos\n#------------------------------#\ndef mirrorHider():\n    global setHider, setHiderParent, setHiderChild\n    '''\n    # change icons for loading\n    cmds.iconTextButton (\"Arm_L_Hiderbutton\", e=True, i=\"Icons_Hider/Loading_Hider.png\")\n    cmds.iconTextButton (\"Leg_L_Hiderbutton\", e=True, i=\"Icons_Hider/Loading_Hider.png\")\n    # missing refresh icon\n    '''\n    try:\n        # Apply mirror from Arm_R_Hider to Arm_L_Hider\n        setHiderParent = cmds.sets(Arm_R_Hider, q=True)\n        setHiderChild = Arm_L_Hider\n        tryNomenclaturesMirror()\n        mirrorPolyHider()\n        setHider = Arm_L_Hider\n        checkStateIcon()\n        print ('Mirror succesuful'),\n    except:\n        setHider = Arm_L_Hider\n        checkStateIcon()\n\n    try:\n        # apply mirror from Leg_R_Hider to Leg_L_Hider\n        setHiderParent = cmds.sets(Leg_R_Hider, q=True)\n        setHiderChild = Leg_L_Hider\n        tryNomenclaturesMirror()\n        mirrorPolyHider()\n        setHider = Leg_L_Hider\n        checkStateIcon()\n        print ('Mirror succesuful'),\n    except:\n        setHider = Leg_L_Hider\n        checkStateIcon()\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    CHECK ALL SETS DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\ndef waitAndRefresh():\n    cmds.refresh(cv=True)\n    time.sleep(0.3)\n    cmds.refresh(cv=True)\n\ndef cycleTurnOnAndOff():\n    waitAndRefresh()\n    hideSet()\n    waitAndRefresh()\n    addNameSpace()\n    showSet()\n    waitAndRefresh()\n    addNameSpace()\n    hideSet()\n    waitAndRefresh()\n    addNameSpace()\n    showSet()\ndef checkAllSets():\n    global setHider, choise\n    \n    response = cmds.confirmDialog(\n                    title='Confirm Check all sets',\n                    message=confirmCheckAllSets,\n                    button=['Yes', 'No'],\n                    defaultButton='Yes',\n                    cancelButton='Cancel',\n                    dismissString='Cancel')\n    if response == 'Yes':\n        # show all sets\n        choise = 'show'; ShowOrHideAllSets()\n        # create All sets list with a specific order\n        allSetsCheck = [Head_Hider,Torso_Hider,Arm_R_Hider,Arm_L_Hider,\n        Leg_R_Hider,Leg_L_Hider, Extra_One_Hider,Extra_Two_Hider,Extra_Three_Hider]    \n        # create progress window\n        cmds.progressWindow( title='Progress Hider test', isInterruptable=True )                                 \n        amount = 0\n        for set in allSetsCheck:\n            cmds.progressWindow( edit=True, progress=amount, status= ('Testing: ' + set  ) )\n            setHider = set\n            cycleTurnOnAndOff()\n            amount = amount+11\n            # Check if the dialog has been cancelled\n            if cmds.progressWindow( query=True, isCancelled=True ) :\n                break\n            # Check if end condition has been reached\n            if cmds.progressWindow( query=True, progress=True ) >= 100 :\n                break    \n        cmds.progressWindow(endProgress=1)\n#-----------------------------------------------------------#############\ndef cycleTurnOnAndOffIsolate():\n    waitAndRefresh()\n    hideSet()\n    waitAndRefresh()\n    addNameSpace()\n    showSet()\n    waitAndRefresh()\n    addNameSpace()\n    hideSet()\n    waitAndRefresh()\n    addNameSpace()\n    showSet()\n    waitAndRefresh()\n    addNameSpace()\n    hideSet()\ndef checkAllSetsIsolate():\n    global setHider, choise\n    # Center view\n    # show all sets\n    choise = 'hide'; ShowOrHideAllSets()\n    # create All sets list with a specific order\n    allSetsCheck = [Head_Hider,Torso_Hider,Arm_R_Hider,Arm_L_Hider,\n    Leg_R_Hider,Leg_L_Hider, Extra_One_Hider,Extra_Two_Hider,Extra_Three_Hider]\n    # create progress window\n    cmds.progressWindow( title='Progress Hider test', isInterruptable=True )                                 \n    amount = 0\n    for set in allSetsCheck:\n        cmds.progressWindow( edit=True, progress=amount, status= ('Testing: ' + set  ) )\n        setHider = set\n        cycleTurnOnAndOffIsolate()\n        amount = amount+11\n        # Check if the dialog has been cancelled\n        if cmds.progressWindow( query=True, isCancelled=True ) :\n            break\n        # Check if end condition has been reached\n        if cmds.progressWindow( query=True, progress=True ) >= 100 :\n            break    \n    cmds.progressWindow(endProgress=1)\n    choise = 'show'; ShowOrHideAllSets()\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    HELP AND CONTACT WINDOW DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\ndef launchtutorial():\n    cmds.launch (web=\"https://youtu.be/RDHIFQfD12g\")\n\ndef toggleImageHelpWindow():\n    if cmds.image(\"helpwindowimage\", q=True, image=True) == \"Icons_Hider/Help_2_On_Hider.png\":\n        cmds.image (\"helpwindowimage\", e=True, image=\"Icons_Hider/Help_2_Off_Hider.png\")\n    else:\n        cmds.image (\"helpwindowimage\", e=True, image=\"Icons_Hider/Help_2_On_Hider.png\")\n    \ndef helpWindow():\n    \n    if cmds.window ('HelpWindowHider', exists=True):\n        cmds.deleteUI (\"HelpWindowHider\")\n    # Window template\n    helpWindowHider = cmds.window('HelpWindowHider',  s=False, h=680, w=656, title=\"Help Window Hider\")\n    scrollLayout = cmds.scrollLayout(horizontalScrollBarThickness=20, verticalScrollBarThickness=16)\n\n    cmds.image(i=\"Icons_Hider/Help_1_Hider.png\")\n    form = cmds.formLayout()\n    # button toggle image\n    object = cmds.button (l=\"\", w=200, h=28, c=\"toggleImageHelpWindow()\", backgroundColor=[0.72,0.15,0.16])\n    cmds.formLayout (form, edit=True, attachForm= [[object, \"top\", 5], [object, \"left\", 215]])\n    # text toggle image\n    object = cmds.text(l='Press here repeatedly to see ', font='boldLabelFont')\n    cmds.formLayout (form, edit=True, attachForm= [[object, \"top\", 12], [object, \"left\", 240]])\n\n    cmds.setParent('..')\n\n    cmds.image('helpwindowimage',i=\"Icons_Hider/Help_2_On_Hider.png\")\n    \n    # Creating elements with custom position\n    form = cmds.formLayout()\n    \n    object = cmds.text (l=\"By Francisco Cerchiara Montero\", font='boldLabelFont')\n    cmds.formLayout (form, edit=True, attachForm= [[object, \"top\", 5], [object, \"left\", 470]])\n    \n    object = cmds.button (l=\"Link to online tutorial\", c=\"launchtutorial()\", backgroundColor=[0.72,0.15,0.16])\n    cmds.formLayout (form, edit=True, attachForm= [[object, \"top\", 0], [object, \"left\", 10]])\n    \n    cmds.setParent('..')\n    cmds.showWindow (helpWindowHider)\n\ndef contactWindow():\n    # Contact Window\n    if cmds.window (\"FCM_Contact\", exists=True ):\n        cmds.deleteUI (\"FCM_Contact\")\n    FCMContact = cmds.window (\"FCM_Contact\", title=\"Contact\", s=False)\n    \n    \n    cmds.rowColumnLayout( numberOfColumns=2, columnAttach=(1, 'right', 0), columnWidth=[(1, 100), (2, 250)] )\n    cmds.text( label='Name:  ' )\n    name = cmds.textField(text='Francisco Cerchiara Montero', editable=True)\n    cmds.text( label='Email:  ' )\n    address = cmds.textField(text='FranCM127@hotmail.com', editable=True)\n    cmds.text( label='Facebook:  ' )\n    phoneNumber = cmds.textField(text='www.facebook.com/Fran127', editable=True)\n    cmds.text( label='Linked-In:  ' )\n    email = cmds.textField(text='www.linkedin.com/in/francm3danimator/', editable=True)\n    \n    #    Attach commands to pass focus to the next field if the Enter\n    #    key is pressed. Hitting just the Return key will keep focus\n    #    in the current field.\n    #\n    cmds.textField( name, edit=True, enterCommand=('cmds.setFocus(\\\"' + address + '\\\")') )\n    cmds.textField( address, edit=True, enterCommand=('cmds.setFocus(\\\"' + phoneNumber + '\\\")') )\n    cmds.textField( phoneNumber, edit=True, enterCommand=('cmds.setFocus(\\\"' + email + '\\\")') )\n    cmds.textField( email, edit=True, enterCommand=('cmds.setFocus(\\\"' + name + '\\\")') )\n    \n    cmds.showWindow( FCMContact )\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n                    WINDOW HIDER DEF\n            \n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n# Window Size\nhighWindow = 20\nwidthWindow = 388\n\n\n## For all buttons sets\ndef buttonWindowHider():\n    global shapeMode\n    removeNameSpace()\n    cmds.iconTextButton ( (setHider + \"button\"), style=\"iconOnly\",\n    ann=blueButtons_Ann, commandRepeatable=True, i=(\"Icons_Hider/\" + setHider + \".png\"),\n    c=commandButton ) \n    cmds.popupMenu(postMenuCommand = popUpButton)\n    cmds.menuItem (i=\"Icons_Hider/PopUp_Add_Hider.png\", l=\"Add Selection\", c= \"shapeMode = 'Off'; addSelectionToSet()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_Add_Hider.png\", l=\"Add Selection Shape\", c= \"shapeMode = 'On'; addSelectionToSet()\")\n    cmds.menuItem (divider=True)\n    cmds.menuItem (i=\"Icons_Hider/PopUp_Remove_Hider.png\", l=\"Remove Selection\", c= \"removeSelection()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_SelectSet_Hider.png\", l=\"Select Set\", c= \"selectSet()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_RemoveSet_Hider.png\", l=\"Remove Set\", c= \"removeSet()\")\n\ndef HiderUI():    \n    global blueButtons_Ann, commandButton, popUpButton, setHider\n    \n    \n    declaringNameSpaces()\n    createSettingsHider()\n\n    \n    if cmds.window ('windowHider', exists=True):\n        cmds.deleteUI (\"windowHider\")\n    windowHider = cmds.window (\"windowHider\", s=False, title= (\"FCM_Hider: \" + namespaceHiderForWindow), menuBar=True)\n    \n    ## ### ### ### ### #### Menu bar #### ### ### ### ### ###\n    # File\n    cmds.menu('FileMenu', label='File')\n    cmds.menuItem(l=\"Save Sets\", c=\"saveSetsHider()\")\n    cmds.menuItem(l=\"Load Sets\", c=\"LoadSetsHider()\")    \n    # Help\n    cmds.menu('HelpMenu', label='Help' )\n    cmds.menuItem( l='Video Tutorial', c=\"launchtutorial()\")\n    cmds.menuItem( l='Contact', c=\"contactWindow()\")\n    cmds.menuItem( l='About version', c=\"print(versionHider),\")\n\n    ## ### ### ### ### #### Column 1 #### ### ### ### ### ###\n\n    cmds.rowColumnLayout (numberOfColumns = 11)\n    # Edit Mode\n    cmds.iconTextButton ('Edit_Modebutton', i=\"Icons_Hider/Contract_Hider.png\", c=\"toggleEditMode()\", ann=editMode_Ann)\n    ## All sets\n    setHider = All_Sets_Hider\n    removeNameSpace()\n    cmds.iconTextButton ( (setHider + \"button\"),\n    ann=allSets_Ann, commandRepeatable=True, i=(\"Icons_Hider/\" + setHider + \".png\"),\n    c=\"cmds.warning('Show or Hide all WIP')\") \n    cmds.popupMenu(postMenuCommand = \"setHider = All_Sets_Hider\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_RemoveSet_Hider.png\", l=\"Empty Sets Body\", c=\"removeAllBodySets()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_RemoveSet_Hider.png\", l=\"Empty Sets Extras\", c=\"removeAllExtraSets()\")\n    cmds.menuItem (i=\"Icons_Hider/PopUp_SelectSet_Hider.png\", l=\"Select All Sets\", c=\"cmds.select(All_Sets_Hider)\")\n    #-----------------------------------------------------------#\n    setHider = Head_Hider\n    commandButton = \"setHider = Head_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Head_Hider\"\n    buttonWindowHider()\n    \n    setHider = Torso_Hider\n    commandButton = \"setHider = Torso_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Torso_Hider\"\n    buttonWindowHider()\n    \n    setHider = Arm_R_Hider\n    commandButton = \"setHider = Arm_R_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Arm_R_Hider\"\n    buttonWindowHider()\n    \n    setHider = Arm_L_Hider\n    commandButton = \"setHider = Arm_L_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Arm_L_Hider\"\n    buttonWindowHider()\n    \n    setHider = Leg_R_Hider\n    commandButton = \"setHider = Leg_R_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Leg_R_Hider\"\n    buttonWindowHider()\n    \n    setHider = Leg_L_Hider\n    commandButton = \"setHider = Leg_L_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Leg_L_Hider\"\n    buttonWindowHider()\n    \n    setHider = Extra_One_Hider\n    commandButton = \"setHider = Extra_One_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Extra_One_Hider\"\n    buttonWindowHider()\n       \n    setHider = Extra_Two_Hider\n    commandButton = \"setHider = Extra_Two_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Extra_Two_Hider\"\n    buttonWindowHider()\n    \n    setHider = Extra_Three_Hider\n    commandButton = \"setHider = Extra_Three_Hider; showOrHideButton()\"\n    popUpButton = \"setHider = Extra_Three_Hider\"\n    buttonWindowHider()\n    \n    ## ### ### ### ### #### Column 2 #### ### ### ### ### ###\n    # Unlock Vis meshes \n    cmds.iconTextButton (i=\"Icons_Hider/Unlock_Hider.png\", c='cmds.warning(rightClickToSeeButtons_Ann),', ann=rightClickToSeeButtons_Ann)\n    cmds.popupMenu()\n    cmds.menuItem(i=\"Icons_Hider/Unlock_Hider.png\", l=\"Unlock All Visible\", c= \"unlockAllVisible()\", ann=unlockAllVis_Ann)\n    cmds.menuItem(i=\"Icons_Hider/Unlock_Hider.png\", l=\"Unlock All Visible Meshes\", c= \"unlockAllVismeshes()\", ann=unlockAllVisMeshes_Ann)\n    cmds.menuItem(i=\"Icons_Hider/Lock_Hider.png\", l=\"Lock Selection\", c= \"lockSelection()\", ann=lockSelection_Ann)\n\n    # Object mode Select\n    cmds.iconTextButton (i=\"Icons_Hider/ObjectMode_Hider.png\", c=\"objectModeHider()\", ann=objectMode_Ann)\n    # Toggle Ctrls and poly select\n    cmds.iconTextButton ('toggleFacesNurbsCurve', i=\"Icons_Hider/Only_Faces_Hider.png\", c=\"switchPolyOrNurbsSel()\",ann=switchPolyOrNurbsCurves_Ann)\n    cmds.popupMenu()\n    cmds.menuItem(i=\"Icons_Hider/PolyColorSel_Red_Hider.png\",l=\"Poly color selection Red\", c= \"cmds.displayColor ('polyFace', 13, active= True)\")\n    cmds.menuItem(i=\"Icons_Hider/PolyColorSel_Green_Hider.png\", l=\"Poly color selection Green\", c=\"cmds.displayColor ('polyFace', 14, active= True)\")\n    cmds.menuItem(i=\"Icons_Hider/PolyColorSel_Default_Hider.png\", l=\"Poly color selection default\", c=\"cmds.displayColor ('polyFace', 21, active= True)\")\n    # Grow selection\n    cmds.iconTextButton (i=\"Icons_Hider/Grow_Hider.png\", c=\"cmds.polySelectConstraint (pp=1)\", commandRepeatable=True, ann=grow_Ann)\n    # Shrink selection\n    cmds.iconTextButton (i=\"Icons_Hider/Shrink_Hider.png\", c=\"cmds.polySelectConstraint (pp=2)\", commandRepeatable=True, ann=shrink_Ann)\n    # Template Line Window\n    cmds.iconTextButton (i=\"Icons_Hider/Template_Line_Hider.png\", c=\"SelectTemplateLineWindow()\", ann=templateLine_Ann)\n    # Mirror \n    cmds.iconTextButton (i=\"Icons_Hider/Mirror_Hider.png\", c=\"mirrorHider()\", ann=mirrorButtons_Ann)\n    # Check all sets\n    cmds.iconTextButton (i=\"Icons_Hider/Show_All_Hidden_Faces_Hider.png\", c=\"checkAllSets()\", ann=checkAllSets_Ann)\n    cmds.popupMenu()\n    cmds.menuItem(l=\"Isolate mode\", c=\"checkAllSetsIsolate()\", ann= ( checkAllSets_Ann + ' but isolating every set') )\n    # Extra functions\n    cmds.iconTextButton (i=\"Icons_Hider/Extra_Functions_Hider.png\",  c='cmds.warning(rightClickToSeeButtons_Ann),', ann=rightClickToSeeButtons_Ann)\n    cmds.popupMenu('extraFunctions')\n    cmds.menuItem(l=\"Show all hidden faces in the scene\", c=\"showAllHiddenFaces()\")\n    # Remove All Hider\n    cmds.iconTextButton (i=\"Icons_Hider/Remove_All_Hider.png\", c=\"confirmRemoveAllHider()\",ann=deleteAll_Ann)\n\n    cmds.setParent('..')\n    # Show window\n    cmds.showWindow( windowHider )    \n    # # # Check Functions # # #\n    checkEditMode()\n    checkAllIconSets()\n    \n \nHiderUI()\n\n\n\n\n\n\n\n\n\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
